import * as vscode from 'vscode';
import { TerminalManager } from '../terminals/TerminalManager';
import { extension as log } from '../utils/logger';

/**
 * „Çø„Éº„Éü„Éä„É´Èñ¢ÈÄ£„ÅÆ„Ç≥„Éû„É≥„Éâ„Éè„É≥„Éâ„É©„Éº
 * „ÉÜ„Ç≠„Çπ„ÉàÈÄÅ‰ø°„ÄÅ„Ç≥„Éû„É≥„ÉâÂÆüË°å„Å™„Å©„ÅÆÂü∫Êú¨Êìç‰Ωú„ÇíÊèê‰æõ
 */
export class TerminalCommand {
  constructor(private terminalManager: TerminalManager) {}

  /**
   * „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çø„Éº„Éü„Éä„É´„Å´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈÄÅ‰ø°
   */
  handleSendToTerminal(content?: string): void {
    log('üöÄ [DEBUG] handleSendToTerminal called');

    try {
      if (!this.terminalManager.hasActiveTerminal()) {
        void vscode.window.showWarningMessage(
          'No active sidebar terminal. Please open the sidebar terminal first.'
        );
        return;
      }

      const activeTerminalId = this.terminalManager.getActiveTerminalId();
      if (!activeTerminalId) {
        log('‚ùå [ERROR] Active terminal ID is null');
        return;
      }

      if (content) {
        // „Ç≥„Éû„É≥„Éâ„Åã„ÇâÁõ¥Êé•Âëº„Å∞„Çå„ÅüÂ†¥ÂêàÔºà„Ç≥„Éû„É≥„Éâ„Éë„É¨„ÉÉ„Éà„Å™„Å©Ôºâ
        this.terminalManager.sendInput(content, activeTerminalId);
        log(`‚úÖ [DEBUG] Sent content to terminal: ${content}`);
      } else {
        // „É¶„Éº„Ç∂„Éº„Å´ÂÖ•Âäõ„ÇíÊ±Ç„ÇÅ„Çã
        void vscode.window
          .showInputBox({
            placeHolder: 'Enter text to send to terminal',
            prompt: 'Text will be sent to the active sidebar terminal',
          })
          .then((input) => {
            if (input) {
              this.terminalManager.sendInput(input, activeTerminalId);
              log(`‚úÖ [DEBUG] Sent user input to terminal: ${input}`);
            }
          });
      }
    } catch (error) {
      log('‚ùå [ERROR] Error in handleSendToTerminal:', error);
      void vscode.window.showErrorMessage(`Failed to send to terminal: ${String(error)}`);
    }
  }
}