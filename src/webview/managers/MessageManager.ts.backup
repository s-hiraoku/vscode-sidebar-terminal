/**
 * Message Manager - Handles WebView ‚Üî Extension communication and command processing
 */

import { webview as log } from '../../utils/logger';
import { TerminalInteractionEvent } from '../../types/common';
import { WebViewFontSettings } from '../../types/shared';
import { IMessageManager, IManagerCoordinator } from '../interfaces/ManagerInterfaces';
import { Terminal } from 'xterm';
import {
  showSessionRestoreStarted,
  showSessionRestoreProgress,
  showSessionRestoreCompleted,
  showSessionRestoreError,
  showSessionSaved,
  showSessionSaveError,
  showSessionCleared,
  showSessionRestoreSkipped,
} from '../utils/NotificationUtils';

interface MessageCommand {
  command: string;
  cliAgentStatus?: {
    activeTerminalName: string | null;
    status: 'connected' | 'disconnected' | 'none';
    agentType: string | null;
    terminalId?: string; // üõ†Ô∏è FIX: Add terminalId for reliable status updates
  };
  [key: string]: unknown;
}

export class MessageManager implements IMessageManager {
  // Message processing queue for reliability with race condition protection
  private messageQueue: unknown[] = [];
  private isProcessingQueue = false;
  private queueLock = false;
  private highPriorityQueue: unknown[] = []; // For input messages that need immediate processing

  // Unified managers
  // Use direct communication instead of CommunicationManager to avoid circular dependency
  // Use direct logger instead of LoggerManager to avoid circular dependency

  /**
   * Handle incoming messages from the extension
   */
  public async handleMessage(message: MessageEvent, coordinator: IManagerCoordinator): Promise<void> {
    try {
      const msg = message.data as MessageCommand;
      log(`üì® [MESSAGE] Received: ${msg.command}`);

      switch (msg.command) {
        case 'init':
          this.handleInitMessage(msg, coordinator);
          break;

        case 'output':
          this.handleOutputMessage(msg, coordinator);
          break;

        case 'terminalRemoved':
          this.handleTerminalRemovedMessage(msg, coordinator);
          break;

        case 'clear':
          this.handleClearTerminalMessage(msg, coordinator);
          break;

        case 'fontSettingsUpdate':
          this.handleFontSettingsUpdateMessage(msg, coordinator);
          break;

        case 'settingsResponse':
          this.handleSettingsResponseMessage(msg, coordinator);
          break;

        case 'terminalCreated':
          await this.handleTerminalCreatedMessage(msg, coordinator);
          break;

        case 'newTerminal':
          this.handleNewTerminalMessage(msg, coordinator);
          break;

        case 'focusTerminal':
          this.handleFocusTerminalMessage(msg, coordinator);
          break;

        case 'stateUpdate':
          this.handleStateUpdateMessage(msg, coordinator);
          break;

        case 'cliAgentStatusUpdate':
          this.handleClaudeStatusUpdateMessage(msg, coordinator);
          break;

        case 'cliAgentFullStateSync':
          this.handleCliAgentFullStateSyncMessage(msg, coordinator);
          break;

        case 'sessionRestore':
          await this.handleSessionRestoreMessage(msg, coordinator);
          break;

        case 'sessionRestoreStarted':
          this.handleSessionRestoreStartedMessage(msg);
          break;

        case 'sessionRestoreProgress':
          this.handleSessionRestoreProgressMessage(msg);
          break;

        case 'sessionRestoreCompleted':
          this.handleSessionRestoreCompletedMessage(msg);
          break;

        case 'sessionRestoreError':
          this.handleSessionRestoreErrorMessage(msg);
          break;
        case 'getScrollback':
          this.handleGetScrollbackMessage(msg, coordinator);
          break;

        // extractScrollbackData case removed - using VS Code standard approach with automatic persistence
        case 'restoreScrollback':
          this.handleRestoreScrollbackMessage(msg, coordinator);
          break;
        case 'scrollbackProgress':
          this.handleScrollbackProgressMessage(msg);
          break;

        case 'sessionSaved':
          this.handleSessionSavedMessage(msg);
          break;

        case 'sessionSaveError':
          this.handleSessionSaveErrorMessage(msg);
          break;

        case 'sessionCleared':
          this.handleSessionClearedMessage();
          break;

        case 'serializeTerminal':
          this.handleSerializeTerminalMessage(msg, coordinator);
          break;

        case 'restoreSerializedContent':
          this.handleRestoreSerializedContentMessage(msg, coordinator);
          break;

        case 'terminalRestoreInfo':
          this.handleTerminalRestoreInfoMessage(msg, coordinator);
          break;

        case 'saveAllTerminalSessions':
          this.handleSaveAllTerminalSessionsMessage(msg, coordinator);
          break;

        case 'sessionRestoreSkipped':
          this.handleSessionRestoreSkippedMessage(msg);
          break;

        case 'terminalRestoreError':
          void this.handleTerminalRestoreErrorMessage(msg);
          break;

        case 'panelLocationUpdate':
          this.handlePanelLocationUpdateMessage(msg, coordinator);
          break;

        case 'requestPanelLocationDetection':
          this.handleRequestPanelLocationDetectionMessage(coordinator);
          break;

        case 'requestTerminalSerialization':
          this.handleRequestTerminalSerializationMessage(msg, coordinator);
          break;

        case 'restoreTerminalSerialization':
          this.handleRestoreTerminalSerializationMessage(msg, coordinator);
          break;

        case 'sessionRestorationData':
          this.handleSessionRestorationDataMessage(msg, coordinator);
          break;

        default:
          log(`‚ö†Ô∏è [MESSAGE] Unknown command: ${msg.command}`);
      }
    } catch (error) {
      log('‚ùå [MESSAGE] Error handling message:', error, message);
    }
  }

  /**
   * üÜï Handle panel location update message (Issue #148)
   * Updates split direction based on panel location
   */
  private handlePanelLocationUpdateMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    try {
      const location = msg.location || 'sidebar';
      log(`üìç [MESSAGE] Panel location update: ${location}`);

      // Get split manager from coordinator
      const splitManager = (coordinator as any).getSplitManager?.();
      if (!splitManager) {
        log('‚ö†Ô∏è [MESSAGE] SplitManager not available on coordinator');
        return;
      }

      // Check if dynamic split direction is enabled via settings
      // This should be checked on the Extension side, but we can add a safeguard here
      const configManager = (coordinator as any).getManagers?.()?.config;
      let isDynamicSplitEnabled = true; // Default to enabled

      if (configManager) {
        try {
          const settings = configManager.loadSettings();
          isDynamicSplitEnabled = settings.dynamicSplitDirection !== false;
        } catch (error) {
          log('‚ö†Ô∏è [MESSAGE] Could not load settings, using default behavior');
        }
      }

      if (!isDynamicSplitEnabled) {
        log(
          'üìç [MESSAGE] Dynamic split direction is disabled via settings, ignoring location update'
        );
        return;
      }

      // Update split direction based on panel location
      const newSplitDirection = location === 'panel' ? 'horizontal' : 'vertical';
      log(`üìç [MESSAGE] Updating split direction to: ${newSplitDirection} (location: ${location})`);

      // Update split direction if it has changed
      splitManager.updateSplitDirection(newSplitDirection, location);
    } catch (error) {
      log('‚ùå [MESSAGE] Error handling panel location update:', error);
    }
  }

  /**
   * üÜï Handle panel location detection request from Extension (Issue #148)
   * Analyzes WebView dimensions and reports back the detected location
   */
  private handleRequestPanelLocationDetectionMessage(coordinator: IManagerCoordinator): void {
    try {
      log('üìè [MESSAGE] Handling panel location detection request');

      // Analyze WebView dimensions to determine likely panel location
      const detectedLocation = this.analyzeWebViewDimensions();

      log(`üìè [MESSAGE] Dimension analysis result: ${detectedLocation}`);

      // Report back to Extension
      this.queueMessage(
        {
          command: 'reportPanelLocation',
          location: detectedLocation,
          timestamp: Date.now(),
        },
        coordinator
      );
    } catch (error) {
      log('‚ùå [MESSAGE] Error in panel location detection:', error);
      // Fallback to sidebar
      this.queueMessage(
        {
          command: 'reportPanelLocation',
          location: 'sidebar',
          timestamp: Date.now(),
        },
        coordinator
      );
    }
  }

  /**
   * üÜï Analyze WebView dimensions to determine panel location
   * @returns Detected panel location based on aspect ratio
   */
  private analyzeWebViewDimensions(): 'sidebar' | 'panel' {
    try {
      // Get WebView container dimensions
      const container = document.body;
      if (!container) {
        log('‚ö†Ô∏è [DIMENSION] No container found, defaulting to sidebar');
        return 'sidebar';
      }

      const width = container.clientWidth;
      const height = container.clientHeight;

      log(`üìè [DIMENSION] Container dimensions: ${width}x${height}`);

      if (width === 0 || height === 0) {
        log('‚ö†Ô∏è [DIMENSION] Invalid dimensions, defaulting to sidebar');
        return 'sidebar';
      }

      // Calculate aspect ratio (width/height)
      const aspectRatio = width / height;

      log(`üìè [DIMENSION] Aspect ratio: ${aspectRatio.toFixed(2)}`);

      // Heuristic:
      // - Sidebar: Usually narrow and tall (aspect ratio < 1.5)
      // - Bottom panel: Usually wide and short (aspect ratio > 2.0)
      if (aspectRatio > 2.0) {
        log('üìè [DIMENSION] Wide layout detected ‚Üí Bottom Panel');
        return 'panel';
      } else if (aspectRatio < 1.5) {
        log('üìè [DIMENSION] Tall layout detected ‚Üí Sidebar');
        return 'sidebar';
      } else {
        // Ambiguous, default to sidebar
        log('üìè [DIMENSION] Ambiguous aspect ratio, defaulting to sidebar');
        return 'sidebar';
      }
    } catch (error) {
      log('‚ùå [DIMENSION] Error analyzing dimensions:', error);
      return 'sidebar';
    }
  }

  /**
   * Send ready message to extension
   */
  public sendReadyMessage(coordinator: IManagerCoordinator): void {
    this.queueMessage(
      {
        command: 'ready',
        timestamp: Date.now(),
      },
      coordinator
    );
    log('üì§ [MESSAGE] Ready message sent');
  }

  /**
   * Send kill terminal message to extension
   */
  public sendKillTerminalMessage(coordinator: IManagerCoordinator): void {
    this.queueMessage(
      {
        command: 'killTerminal',
        timestamp: Date.now(),
      },
      coordinator
    );
    log('üì§ [MESSAGE] Kill terminal message sent');
  }

  /**
   * Send kill specific terminal message to extension
   */
  public sendKillSpecificTerminalMessage(
    terminalId: string,
    coordinator: IManagerCoordinator
  ): void {
    log(`üì§ [MESSAGE] ========== SENDING KILL SPECIFIC TERMINAL MESSAGE ==========`);
    log(`üì§ [MESSAGE] Terminal ID: ${terminalId}`);
    log(`üì§ [MESSAGE] Coordinator available:`, !!coordinator);

    const message = {
      command: 'killTerminal',
      terminalId,
      timestamp: Date.now(),
    };

    log(`üì§ [MESSAGE] Message to send:`, message);

    try {
      this.queueMessage(message, coordinator);
      log(`üì§ [MESSAGE] Kill specific terminal message queued successfully for: ${terminalId}`);
    } catch (error) {
      log(`‚ùå [MESSAGE] Error queueing kill message:`, error);
    }
  }

  /**
   * Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£: Áµ±‰∏Ä„Åï„Çå„ÅüÂâäÈô§Ë¶ÅÊ±Ç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
   */
  public sendDeleteTerminalMessage(
    terminalId: string,
    requestSource: 'header' | 'panel',
    coordinator: IManagerCoordinator
  ): void {
    log(`üì§ [MESSAGE] ========== SENDING DELETE TERMINAL MESSAGE ==========`);
    log(`üì§ [MESSAGE] Terminal ID: ${terminalId}`);
    log(`üì§ [MESSAGE] Request source: ${requestSource}`);
    log(`üì§ [MESSAGE] Coordinator available:`, !!coordinator);

    const message = {
      command: 'deleteTerminal',
      terminalId,
      requestSource,
      timestamp: Date.now(),
    };

    log(`üì§ [MESSAGE] Message to send:`, message);

    try {
      this.queueMessage(message, coordinator);
      log(`üì§ [MESSAGE] Delete terminal message queued successfully for: ${terminalId}`);
    } catch (error) {
      log(`‚ùå [MESSAGE] Error queueing delete message:`, error);
    }
  }

  /**
   * Issue #122: AI AgentÂàá„ÇäÊõø„ÅàË¶ÅÊ±Ç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
   */
  public sendSwitchAiAgentMessage(terminalId: string, coordinator: IManagerCoordinator): void {
    log(`üì§ [MESSAGE] ========== SENDING SWITCH AI AGENT MESSAGE ==========`);
    log(`üì§ [MESSAGE] Terminal ID: ${terminalId}`);
    log(`üì§ [MESSAGE] Coordinator available:`, !!coordinator);

    const message = {
      command: 'switchAiAgent',
      terminalId,
      timestamp: Date.now(),
    };

    log(`üì§ [MESSAGE] Message to send:`, message);

    try {
      this.queueMessage(message, coordinator);
      log(`üì§ [MESSAGE] Switch AI Agent message queued successfully for: ${terminalId}`);
    } catch (error) {
      log(`‚ùå [MESSAGE] Error queueing switch AI Agent message:`, error);
    }
  }

  /**
   * Emit terminal interaction event
   */
  public emitTerminalInteractionEvent(
    type: TerminalInteractionEvent['type'],
    terminalId: string,
    data: unknown,
    coordinator: IManagerCoordinator
  ): void {
    this.queueMessage(
      {
        command: 'terminalInteraction',
        type,
        terminalId,
        data,
        timestamp: Date.now(),
      },
      coordinator
    );
    log(`üì§ [MESSAGE] Terminal interaction event: ${type} for ${terminalId}`);
  }

  /**
   * Handle init message from extension
   */
  private handleInitMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    log('üöÄ [MESSAGE] Handling init message');

    try {
      // Request current settings
      this.queueMessage(
        {
          command: 'getSettings',
        },
        coordinator
      );

      // Emit ready event
      this.emitTerminalInteractionEvent('webview-ready', '', undefined, coordinator);

      // Send confirmation back to extension
      coordinator.postMessageToExtension({
        command: 'test',
        type: 'initComplete',
        data: 'WebView processed INIT message',
        timestamp: Date.now(),
      });

      log('‚úÖ [MESSAGE] INIT processing completed');
    } catch (error) {
      log('‚ùå [MESSAGE] Error processing INIT message:', error);
    }
  }

  /**
   * Handle output message from extension
   */
  private handleOutputMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const data = msg.data as string;
    const terminalId = msg.terminalId as string;

    // ‚úÖ CRITICAL FIX: Strict validation for output message handling
    if (!data || !terminalId) {
      console.error('üö® [MESSAGE] Invalid output message - missing data or terminalId:', {
        hasData: !!data,
        hasTerminalId: !!terminalId,
        terminalId: terminalId,
      });
      return;
    }

    if (typeof terminalId !== 'string' || terminalId.trim() === '') {
      console.error('üö® [MESSAGE] Invalid terminalId format:', terminalId);
      return;
    }

    // ‚úÖ CRITICAL: Validate terminal exists before processing output
    const terminal = coordinator.getTerminalInstance(terminalId);
    if (!terminal) {
      console.error(`üö® [MESSAGE] Output for non-existent terminal: ${terminalId}`);
      console.log(
        'üîç [MESSAGE] Available terminals:',
        Array.from(coordinator.getAllTerminalInstances().keys())
      );
      return;
    }

    console.log(
      `üì• [MESSAGE] Processing output for terminal ${terminal.name} (${terminalId}): ${data.length} chars`
    );

    // üîç OPTIMIZATION: Only log significant CLI agent patterns
    if (
      data.length > 2000 &&
      (data.includes('Gemini') || data.includes('gemini') || data.includes('Claude'))
    ) {
      console.log(`üîç [WEBVIEW] CLI Agent output detected for terminal ${terminal.name}:`, {
        terminalId,
        terminalName: terminal.name,
        dataLength: data.length,
        containsGeminiPattern: data.includes('Gemini') || data.includes('gemini'),
        containsClaudePattern: data.includes('Claude') || data.includes('claude'),
      });
    }

    try {
      // Use PerformanceManager for buffered write with scroll preservation
      const managers = coordinator.getManagers();
      if (managers && managers.performance) {
        managers.performance.bufferedWrite(data, terminal.terminal, terminalId);
        console.log(
          `üì§ [MESSAGE] Output buffered via PerformanceManager for ${terminal.name}: ${data.length} chars`
        );
      } else {
        // Fallback to direct write if performance manager is not available
        terminal.terminal.write(data);
        console.log(
          `üì§ [MESSAGE] Output written directly to ${terminal.name}: ${data.length} chars`
        );
      }
    } catch (error) {
      console.error(`üö® [MESSAGE] Error writing output to terminal ${terminal.name}:`, error);
    }
  }

  /**
   * Handle terminal removed message from extension
   */
  private handleTerminalRemovedMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    const terminalId = msg.terminalId as string;
    if (terminalId) {
      log(`üóëÔ∏è [MESSAGE] Terminal removed from extension: ${terminalId}`);
      // Call the coordinator's method to handle terminal removal from UI
      this.handleTerminalRemovedFromExtension(terminalId, coordinator);
    }
  }

  /**
   * Handle terminal removed from extension - clean up UI
   */
  private handleTerminalRemovedFromExtension(
    terminalId: string,
    coordinator: IManagerCoordinator
  ): void {
    log(`üóëÔ∏è [MESSAGE] Handling terminal removal from extension: ${terminalId}`);

    // Use the coordinator's method to handle terminal removal from UI
    if (
      'handleTerminalRemovedFromExtension' in coordinator &&
      typeof coordinator.handleTerminalRemovedFromExtension === 'function'
    ) {
      coordinator.handleTerminalRemovedFromExtension(terminalId);
    } else {
      log(`‚ö†Ô∏è [MESSAGE] handleTerminalRemovedFromExtension method not found on coordinator`);
    }
  }

  /**
   * Handle clear terminal message from extension
   */
  private handleClearTerminalMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const terminalId = msg.terminalId as string;
    if (terminalId) {
      const terminal = coordinator.getTerminalInstance(terminalId);
      if (terminal) {
        terminal.terminal.clear();
        log(`üßπ [MESSAGE] Terminal cleared: ${terminalId}`);
      }
    }
  }

  /**
   * Handle font settings update from extension
   */
  private handleFontSettingsUpdateMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    const fontSettings = msg.fontSettings as WebViewFontSettings;
    if (fontSettings) {
      log('üé® [MESSAGE] Font settings update received:', fontSettings);
      coordinator.applyFontSettings(fontSettings);
      this.emitTerminalInteractionEvent('font-settings-update', '', fontSettings, coordinator);
    }
  }

  /**
   * Handle settings response from extension
   */
  private handleSettingsResponseMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    const settings = msg.settings;
    if (settings) {
      log('‚öôÔ∏è [MESSAGE] Settings response received');
      this.emitTerminalInteractionEvent('settings-update', '', settings, coordinator);
    }
  }

  /**
   * Handle terminal created message from extension
   */
  private async handleTerminalCreatedMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): Promise<void> {
    const terminalId = msg.terminalId as string;
    const terminalName = msg.terminalName as string;
    const config = msg.config;

    if (terminalId && terminalName && config) {
      log(`‚úÖ [MESSAGE] Terminal created: ${terminalId} (${terminalName})`);
      // Create the terminal in the coordinator
      await coordinator.createTerminal(terminalId, terminalName, config);
    }
  }

  /**
   * Handle new terminal creation message
   */
  private handleNewTerminalMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const terminalId = msg.terminalId as string;
    const terminalName = msg.terminalName as string;
    const config = msg.config;

    if (terminalId && terminalName) {
      log(`‚ûï [MESSAGE] New terminal request: ${terminalId} (${terminalName})`);
      this.emitTerminalInteractionEvent(
        'new-terminal',
        terminalId,
        { terminalName, config },
        coordinator
      );
    }
  }

  /**
   * Handle focus terminal message
   */
  private handleFocusTerminalMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const terminalId = msg.terminalId as string;
    if (terminalId) {
      coordinator.ensureTerminalFocus(terminalId);
      log(`üéØ [MESSAGE] Terminal focused: ${terminalId}`);
    }
  }

  /**
   * Handle resize terminal message
   */
  private handleResizeTerminalMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const terminalId = msg.terminalId as string;
    const cols = msg.cols as number;
    const rows = msg.rows as number;

    if (terminalId && typeof cols === 'number' && typeof rows === 'number') {
      log(`üìê [MESSAGE] Resize terminal ${terminalId}: ${cols}x${rows}`);
      this.emitTerminalInteractionEvent('resize', terminalId, { cols, rows }, coordinator);
    }
  }

  /**
   * Handle kill terminal message
   */
  private handleKillTerminalMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    log(`‚ö∞Ô∏è [MESSAGE] Kill terminal command received`);
    // Kill the active terminal (no specific terminalId needed)
    coordinator.closeTerminal();
  }

  /**
   * Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£: Áä∂ÊÖãÊõ¥Êñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá¶ÁêÜ
   */
  private handleStateUpdateMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    const state = msg.state;
    if (state) {
      log('üîÑ [MESSAGE] State update received:', state);

      // IManagerCoordinator„Å´updateState„É°„ÇΩ„ÉÉ„Éâ„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      if ('updateState' in coordinator && typeof coordinator.updateState === 'function') {
        coordinator.updateState(state);
      } else {
        log('‚ö†Ô∏è [MESSAGE] updateState method not found on coordinator');
      }
    } else {
      log('‚ö†Ô∏è [MESSAGE] No state data in stateUpdate message');
    }
  }

  /**
   * Handle Claude status update message from extension
   */
  private handleClaudeStatusUpdateMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log(`üì® [MESSAGE] CLI Agent Status Update received`);

    const cliAgentStatus = msg.cliAgentStatus;
    if (cliAgentStatus) {
      log(
        `üîÑ [MESSAGE] Processing status update: ${cliAgentStatus.status} for ${cliAgentStatus.activeTerminalName} (ID: ${cliAgentStatus.terminalId})`
      );

      try {
        // üõ†Ô∏è FIX: Use terminalId directly if available, fallback to extracting from name
        let terminalId: string;

        if (cliAgentStatus.terminalId) {
          // Use the provided terminalId directly (most reliable)
          terminalId = cliAgentStatus.terminalId;
          log(`üéØ [MESSAGE] Using provided terminalId: ${terminalId}`);
        } else if (cliAgentStatus.activeTerminalName) {
          // Fallback: Extract terminal ID from terminal name (e.g., "Terminal 1" -> "1")
          terminalId = cliAgentStatus.activeTerminalName.replace('Terminal ', '') || '1';
          log(`üîç [MESSAGE] Extracted terminalId from name: ${terminalId}`);
        } else {
          // Last resort: Find terminal by status (for termination cases)
          const allTerminals = coordinator.getAllTerminalInstances();
          const connectedTerminal = Array.from(allTerminals.keys())[0]; // Use first terminal as fallback
          terminalId = connectedTerminal || '1';
          log(`‚ö†Ô∏è [MESSAGE] Using fallback terminalId: ${terminalId}`);
        }

        // Map legacy status to new status format
        const mappedStatus = this.mapLegacyStatus(cliAgentStatus.status);

        // Call the centralized status management method
        coordinator.updateCliAgentStatus(
          terminalId,
          mappedStatus,
          cliAgentStatus.agentType || null
        );

        log(
          `‚úÖ [MESSAGE] CLI Agent status updated successfully: ${mappedStatus} for terminal ${terminalId}`
        );
      } catch (error) {
        log(`‚ùå [MESSAGE] Error updating CLI Agent status:`, error);
      }
    } else {
      log('‚ö†Ô∏è [MESSAGE] No CLI Agent status data in message');
    }
  }

  /**
   * Map legacy status values to new status format
   */
  private mapLegacyStatus(legacyStatus: string): 'connected' | 'disconnected' | 'none' {
    switch (legacyStatus.toLowerCase()) {
      case 'connected':
        return 'connected';
      case 'disconnected':
        return 'disconnected';
      case 'none':
      case 'inactive':
      case 'terminated':
        return 'none';
      default:
        log(`‚ö†Ô∏è [MESSAGE] Unknown legacy status: ${legacyStatus}, defaulting to 'none'`);
        return 'none';
    }
  }

  /**
   * üîß NEW: Handle full CLI Agent state sync message from extension
   * Solves DISCONNECTED terminals showing as "none" instead of "disconnected"
   */
  private handleCliAgentFullStateSyncMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log(`üì° [MESSAGE] CLI Agent Full State Sync received`);
    log(`üîç [MESSAGE] Full message data:`, msg);

    const terminalStates = msg.terminalStates;
    const connectedAgentId = msg.connectedAgentId;
    const connectedAgentType = msg.connectedAgentType;
    const disconnectedCount = msg.disconnectedCount;

    log(`üîç [MESSAGE] Extracted data:`, {
      terminalStates,
      connectedAgentId,
      connectedAgentType,
      disconnectedCount,
    });

    if (terminalStates) {
      log(
        `üîÑ [MESSAGE] Processing full state sync: CONNECTED=${String(connectedAgentId)} (${String(connectedAgentType)}), DISCONNECTED=${String(disconnectedCount)}`
      );
      log(`üìã [MESSAGE] Terminal states:`, terminalStates);

      try {
        // Apply all terminal states at once
        for (const [terminalId, stateInfo] of Object.entries(terminalStates)) {
          const typedStateInfo = stateInfo as {
            status: 'connected' | 'disconnected' | 'none';
            agentType: string | null;
          };
          log(`üîÑ [MESSAGE] About to update terminal ${terminalId}:`, typedStateInfo);

          try {
            coordinator.updateCliAgentStatus(
              terminalId,
              typedStateInfo.status,
              typedStateInfo.agentType
            );

            log(
              `‚úÖ [MESSAGE] Applied state: Terminal ${terminalId} -> ${typedStateInfo.status} (${typedStateInfo.agentType})`
            );
          } catch (error) {
            log(`‚ùå [MESSAGE] Error updating terminal ${terminalId}:`, error);
          }
        }

        log(`üéØ [MESSAGE] Full CLI Agent state sync completed successfully`);
      } catch (error) {
        log(`‚ùå [MESSAGE] Error during full state sync:`, error);
      }
    } else {
      log('‚ö†Ô∏è [MESSAGE] No terminal states data in full state sync message');
    }
  }

  /**
   * Queue message for reliable delivery with priority handling
   */
  private queueMessage(message: unknown, coordinator: IManagerCoordinator): void {
    const msgObj = message as { command?: string; type?: string };
    const messageType = msgObj?.command || 'unknown';

    // Determine if this is a high-priority input message
    const isInputMessage =
      messageType === 'input' ||
      messageType === 'terminalInteraction' ||
      (msgObj?.type && ['input', 'keydown', 'paste'].includes(msgObj.type as string));

    if (isInputMessage) {
      this.highPriorityQueue.push(message);
      log(
        `‚ö° [MESSAGE] Queueing HIGH PRIORITY message: ${messageType} (hp queue: ${this.highPriorityQueue.length})`
      );
    } else {
      this.messageQueue.push(message);
      log(
        `üì§ [MESSAGE] Queueing message: ${messageType} (normal queue: ${this.messageQueue.length})`
      );
    }

    void this.processMessageQueue(coordinator);
  }

  /**
   * Process message queue with error handling and race condition protection
   */
  private async processMessageQueue(coordinator: IManagerCoordinator): Promise<void> {
    // Prevent race conditions with a simple lock mechanism
    if (this.queueLock) {
      return;
    }

    if (this.isProcessingQueue) {
      return;
    }

    // Check if we have any messages to process
    if (this.highPriorityQueue.length === 0 && this.messageQueue.length === 0) {
      return;
    }

    this.queueLock = true;
    this.isProcessingQueue = true;

    try {
      // Process high-priority messages first (input messages)
      while (this.highPriorityQueue.length > 0) {
        const message = this.highPriorityQueue.shift();
        try {
          coordinator.postMessageToExtension(message);
          // No delay for high-priority messages - immediate processing
        } catch (error) {
          log('‚ùå [MESSAGE] Error sending HIGH PRIORITY message:', error);
          // Re-queue high-priority message at the front
          this.highPriorityQueue.unshift(message);
          break;
        }
      }

      // Process normal priority messages
      while (this.messageQueue.length > 0) {
        const message = this.messageQueue.shift();
        try {
          coordinator.postMessageToExtension(message);
          await this.delay(1); // Small delay for normal messages to prevent overwhelming
        } catch (error) {
          log('‚ùå [MESSAGE] Error sending message:', error);
          // Re-queue message for retry
          this.messageQueue.unshift(message);
          break;
        }
      }
    } finally {
      // Always release the lock, even if an error occurs
      this.isProcessingQueue = false;
      this.queueLock = false;
    }
  }

  /**
   * Send input to terminal
   */
  public sendInput(input: string, terminalId?: string, coordinator?: IManagerCoordinator): void {
    if (coordinator) {
      // ‚úÖ CRITICAL FIX: Robust terminal ID resolution with validation
      let resolvedTerminalId: string;

      if (terminalId) {
        // Use provided terminal ID, but validate it exists
        const terminalInstance = coordinator.getTerminalInstance(terminalId);
        if (!terminalInstance) {
          console.error(`üö® [MESSAGE] Invalid terminal ID provided: ${terminalId}`);
          // Fallback to active terminal
          const activeId = coordinator.getActiveTerminalId();
          if (!activeId) {
            console.error('üö® [MESSAGE] No active terminal available for input');
            return;
          }
          resolvedTerminalId = activeId;
          console.warn(`‚ö†Ô∏è [MESSAGE] Falling back to active terminal: ${resolvedTerminalId}`);
        } else {
          resolvedTerminalId = terminalId;
        }
      } else {
        // Get active terminal with validation
        const activeId = coordinator.getActiveTerminalId();
        if (!activeId) {
          console.error('üö® [MESSAGE] No active terminal ID available for input');
          return;
        }

        // Double-check the active terminal exists
        const activeTerminal = coordinator.getTerminalInstance(activeId);
        if (!activeTerminal) {
          console.error(`üö® [MESSAGE] Active terminal ID ${activeId} does not exist`);
          // Try to find any available terminal as last resort
          const allTerminals = coordinator.getAllTerminalInstances();
          const firstTerminal = allTerminals.values().next().value;
          if (!firstTerminal) {
            console.error('üö® [MESSAGE] No terminals available at all');
            return;
          }
          resolvedTerminalId = firstTerminal.id;
          console.warn(
            `‚ö†Ô∏è [MESSAGE] Emergency fallback to first available terminal: ${resolvedTerminalId}`
          );
        } else {
          resolvedTerminalId = activeId;
        }
      }

      // ‚úÖ CRITICAL: Final validation before sending input
      const targetTerminal = coordinator.getTerminalInstance(resolvedTerminalId);
      if (!targetTerminal) {
        console.error(`üö® [MESSAGE] Failed to resolve terminal for input: ${resolvedTerminalId}`);
        return;
      }

      console.log(
        `‚å®Ô∏è [MESSAGE] Sending input to terminal ${targetTerminal.name} (${resolvedTerminalId}): ${input.length} chars`
      );

      this.queueMessage(
        {
          command: 'input',
          data: input,
          terminalId: resolvedTerminalId,
          timestamp: Date.now(), // Add timestamp for debugging
          terminalName: targetTerminal.name, // Add terminal name for validation
        },
        coordinator
      );

      console.log(`‚å®Ô∏è [MESSAGE] Input queued successfully for terminal: ${resolvedTerminalId}`);
    }
  }

  /**
   * Request settings from extension
   */
  public requestSettings(coordinator: IManagerCoordinator): void {
    this.queueMessage(
      {
        command: 'getSettings',
      },
      coordinator
    );
    log('‚öôÔ∏è [MESSAGE] Settings requested');
  }

  /**
   * Send settings update to extension
   */
  public updateSettings(settings: unknown, coordinator: IManagerCoordinator): void {
    this.queueMessage(
      {
        command: 'updateSettings',
        settings,
      },
      coordinator
    );
    log('‚öôÔ∏è [MESSAGE] Settings update sent');
  }

  /**
   * Send resize request to extension
   */
  public sendResize(
    cols: number,
    rows: number,
    terminalId?: string,
    coordinator?: IManagerCoordinator
  ): void {
    if (coordinator) {
      this.queueMessage(
        {
          command: 'resize',
          cols,
          rows,
          terminalId: terminalId || coordinator.getActiveTerminalId(),
        },
        coordinator
      );
      log(
        `üìê [MESSAGE] Resize request sent: ${cols}x${rows} for ${terminalId || 'active terminal'}`
      );
    }
  }

  /**
   * Request terminal creation
   */
  public requestNewTerminal(coordinator: IManagerCoordinator): void {
    this.queueMessage(
      {
        command: 'createTerminal',
        timestamp: Date.now(),
      },
      coordinator
    );
    log('‚ûï [MESSAGE] New terminal requested');
  }

  /**
   * Small delay utility
   */
  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /**
   * Get message queue statistics with high-priority queue info
   */
  public getQueueStats(): {
    queueSize: number;
    highPriorityQueueSize: number;
    isProcessing: boolean;
    isLocked: boolean;
  } {
    return {
      queueSize: this.messageQueue.length,
      highPriorityQueueSize: this.highPriorityQueue.length,
      isProcessing: this.isProcessingQueue,
      isLocked: this.queueLock,
    };
  }

  /**
   * Clear message queues (emergency) with race condition protection
   */
  public clearQueue(): void {
    // Wait for current processing to finish before clearing
    if (this.queueLock || this.isProcessingQueue) {
      log('‚ö†Ô∏è [MESSAGE] Queue is busy, scheduling clear after current processing');
      setTimeout(() => this.clearQueue(), 10);
      return;
    }

    this.messageQueue = [];
    this.highPriorityQueue = [];
    this.isProcessingQueue = false;
    this.queueLock = false;
    log('üóëÔ∏è [MESSAGE] All message queues cleared');
  }

  /**
   * Handle session restore message from extension
   */
  private async handleSessionRestoreMessage(msg: MessageCommand, coordinator: IManagerCoordinator): Promise<void> {
    log('üîÑ [MESSAGE] Session restore message received');

    const terminalId = msg.terminalId as string;
    const terminalName = msg.terminalName as string;
    const config = msg.config;
    const sessionRestoreMessage = msg.sessionRestoreMessage as string;
    const sessionScrollback = msg.sessionScrollback as string[];

    if (terminalId && terminalName && config) {
      log(`üîÑ [MESSAGE] Restoring terminal session: ${terminalId} (${terminalName})`);
      log(`üîÑ [MESSAGE] Restore message: ${sessionRestoreMessage}`);
      log(`üîÑ [MESSAGE] Scrollback lines: ${sessionScrollback?.length || 0}`);

      try {
        // Simple approach: Create terminal normally, then restore scrollback
        await coordinator.createTerminal(terminalId, terminalName, config);
        log(`‚úÖ [MESSAGE] Created terminal for session restore: ${terminalId}`);

        // Restore scrollback data after a brief delay
        if (sessionRestoreMessage || (sessionScrollback && sessionScrollback.length > 0)) {
          setTimeout(() => {
            if (
              'restoreTerminalScrollback' in coordinator &&
              typeof coordinator.restoreTerminalScrollback === 'function'
            ) {
              coordinator.restoreTerminalScrollback(
                terminalId,
                sessionRestoreMessage || '',
                sessionScrollback || []
              );
              log(`‚úÖ [MESSAGE] Restored scrollback for terminal: ${terminalId}`);
            } else {
              log('‚ö†Ô∏è [MESSAGE] restoreTerminalScrollback method not found');
            }
          }, 100);
        }
      } catch (error) {
        log(`‚ùå [MESSAGE] Failed to restore terminal session ${terminalId}: ${String(error)}`);
        // Continue with regular terminal creation as fallback
        await coordinator.createTerminal(terminalId, terminalName, config);
      }
    } else {
      log('‚ùå [MESSAGE] Invalid session restore data received');
    }
  }

  /**
   * Request scrollback data from extension for a terminal
   */
  public requestScrollbackData(
    terminalId: string,
    lines: number,
    coordinator: IManagerCoordinator
  ): void {
    this.queueMessage(
      {
        command: 'getScrollbackData',
        terminalId,
        scrollbackLines: lines,
      },
      coordinator
    );
    log(`üìú [MESSAGE] Scrollback data requested for terminal ${terminalId}: ${lines} lines`);
  }

  /**
   * Dispose and cleanup
   */
  /**
   * Session restore notification handlers
   */
  private handleSessionRestoreStartedMessage(msg: MessageCommand): void {
    const terminalCount = (msg.terminalCount as number) || 0;
    log(`üîÑ [MESSAGE] Session restore started for ${terminalCount} terminals`);
    showSessionRestoreStarted(terminalCount);
  }

  private handleSessionRestoreProgressMessage(msg: MessageCommand): void {
    const restored = (msg.restored as number) || 0;
    const total = (msg.total as number) || 0;
    log(`‚è≥ [MESSAGE] Session restore progress: ${restored}/${total}`);
    showSessionRestoreProgress(restored, total);
  }

  private handleSessionRestoreCompletedMessage(msg: MessageCommand): void {
    const restoredCount = (msg.restoredCount as number) || 0;
    const skippedCount = (msg.skippedCount as number) || 0;
    log(
      `‚úÖ [MESSAGE] Session restore completed: ${restoredCount} restored, ${skippedCount} skipped`
    );
    showSessionRestoreCompleted(restoredCount, skippedCount);
  }

  private handleSessionRestoreErrorMessage(msg: MessageCommand): void {
    const error = (msg.error as string) || 'Unknown error';
    const partialSuccess = (msg.partialSuccess as boolean) || false;
    const errorType = (msg.errorType as string) || undefined;
    log(
      `‚ùå [MESSAGE] Session restore error: ${error} (partial: ${partialSuccess}, type: ${errorType})`
    );
    showSessionRestoreError(error, partialSuccess, errorType);
  }

  private handleSessionSavedMessage(msg: MessageCommand): void {
    const terminalCount = (msg.terminalCount as number) || 0;
    log(`üíæ [MESSAGE] Session saved with ${terminalCount} terminals`);
    showSessionSaved(terminalCount);
  }

  private handleSessionSaveErrorMessage(msg: MessageCommand): void {
    const error = (msg.error as string) || 'Unknown error';
    log(`üíæ‚ùå [MESSAGE] Session save error: ${error}`);
    showSessionSaveError(error);
  }

  private handleSessionClearedMessage(): void {
    log('üóëÔ∏è [MESSAGE] Session cleared');
    showSessionCleared();
  }

  private handleSessionRestoreSkippedMessage(msg: MessageCommand): void {
    const reason = (msg.reason as string) || 'Unknown reason';
    log(`‚è≠Ô∏è [MESSAGE] Session restore skipped: ${reason}`);
    showSessionRestoreSkipped(reason);
  }

  private async handleTerminalRestoreErrorMessage(msg: MessageCommand): Promise<void> {
    const terminalName = (msg.terminalName as string) || 'Unknown terminal';
    const error = (msg.error as string) || 'Unknown error';
    log(`‚ö†Ô∏è [MESSAGE] Terminal restore error: ${terminalName} - ${error}`);

    // Import the function here to avoid circular dependencies
    const { showTerminalRestoreError } = await import('../utils/NotificationUtils');
    showTerminalRestoreError(terminalName, error);
  }

  /**
   * Handle scrollback data extraction request (new unified interface)
   */
  private handleExtractScrollbackDataMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üìã [MESSAGE] ========== EXTRACT SCROLLBACK DATA MESSAGE RECEIVED ==========');
    log('üìã [MESSAGE] Full message:', msg);
    log('üìã [MESSAGE] Message keys:', Object.keys(msg || {}));

    const terminalId = msg.terminalId as string;
    const maxLines = (msg.maxLines as number) || 1000;
    const requestId = msg.requestId as string;

    log(
      `üìã [MESSAGE] Extracted parameters: terminalId=${terminalId}, maxLines=${maxLines}, requestId=${requestId}`
    );

    if (!terminalId) {
      log('‚ùå [MESSAGE] No terminal ID provided for scrollback extraction');
      return;
    }

    if (!requestId) {
      log('‚ùå [MESSAGE] No request ID provided for scrollback extraction');
      return;
    }

    // Debug coordinator state
    log(
      'üìã [MESSAGE] Coordinator available terminals:',
      coordinator.getAllTerminalInstances().size
    );
    const allTerminals = coordinator.getAllTerminalInstances();
    for (const [id, terminal] of allTerminals) {
      log(`üìã [MESSAGE] Available terminal: ${id} (name: ${terminal.name})`);
    }

    // Get terminal instance
    const terminalInstance = coordinator.getTerminalInstance(terminalId);
    log(`üìã [MESSAGE] Terminal instance found: ${!!terminalInstance}`);
    if (terminalInstance) {
      log(
        `üìã [MESSAGE] Terminal instance details: id=${terminalInstance.id}, name=${terminalInstance.name}, hasTerminal=${!!terminalInstance.terminal}`
      );
    }

    if (!terminalInstance) {
      log(`‚ùå [MESSAGE] Terminal instance not found for ID: ${terminalId}`);
      log('‚ùå [MESSAGE] Sending error response...');

      // Send error response
      this.queueMessage(
        {
          command: 'scrollbackDataCollected',
          terminalId,
          requestId,
          scrollbackData: [],
          success: false,
          error: `Terminal not found: ${terminalId}`,
          timestamp: Date.now(),
        },
        coordinator
      );
      log('‚ùå [MESSAGE] Error response queued');
      return;
    }

    try {
      log('üìã [MESSAGE] Starting scrollback extraction process...');

      // Try to extract scrollback from persistence manager first (if available)
      let scrollbackData: Array<{ content: string; type?: string; timestamp?: number }> = [];

      try {
        log('üìã [MESSAGE] Attempting persistence manager extraction...');
        scrollbackData = this.extractScrollbackFromPersistenceManager(
          coordinator,
          terminalId,
          maxLines
        );
        log(`üìã [MESSAGE] Extracted ${scrollbackData.length} lines from persistence manager`);
      } catch (persistenceError) {
        log(
          `‚ö†Ô∏è [MESSAGE] Persistence manager extraction failed, falling back to xterm buffer: ${String(persistenceError)}`
        );

        try {
          log('üìã [MESSAGE] Attempting xterm buffer extraction...');
          scrollbackData = this.extractScrollbackFromXterm(terminalInstance.terminal, maxLines);
          log(`üìã [MESSAGE] Extracted ${scrollbackData.length} lines from xterm buffer`);
        } catch (xtermError) {
          log(`‚ùå [MESSAGE] Xterm buffer extraction also failed: ${String(xtermError)}`);
          throw xtermError;
        }
      }

      log('üìã [MESSAGE] Preparing to send scrollbackDataCollected response...');

      // Send scrollback data back to extension with correct command name
      const responseMessage = {
        command: 'scrollbackDataCollected',
        terminalId,
        requestId,
        scrollbackData,
        success: true,
        timestamp: Date.now(),
      };

      log('üìã [MESSAGE] Response message prepared:', responseMessage);

      this.queueMessage(responseMessage, coordinator);

      log(
        `‚úÖ [MESSAGE] Scrollback data collected for terminal ${terminalId}: ${scrollbackData.length} lines (requestId: ${requestId})`
      );
      log('‚úÖ [MESSAGE] Response has been queued and should be sent to extension');
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error extracting scrollback data: ${error instanceof Error ? error.message : String(error)}`
      );

      this.queueMessage(
        {
          command: 'scrollbackDataCollected',
          terminalId,
          requestId,
          scrollbackData: [],
          success: false,
          error: `Failed to extract scrollback: ${error instanceof Error ? error.message : String(error)}`,
          timestamp: Date.now(),
        },
        coordinator
      );
    }
  }

  /**
   * Handle scrollback extraction request
   */
  private handleGetScrollbackMessage(msg: MessageCommand, coordinator: IManagerCoordinator): void {
    log('üìã [MESSAGE] Handling get scrollback message');

    const terminalId = msg.terminalId as string;
    const maxLines = (msg.maxLines as number) || 1000;

    if (!terminalId) {
      log('‚ùå [MESSAGE] No terminal ID provided for scrollback extraction');
      return;
    }

    // Get terminal instance instead of element
    const terminalInstance = coordinator.getTerminalInstance(terminalId);
    if (!terminalInstance) {
      log(`‚ùå [MESSAGE] Terminal instance not found for ID: ${terminalId}`);
      return;
    }

    try {
      // Extract scrollback from xterm.js
      const scrollbackContent = this.extractScrollbackFromXterm(
        terminalInstance.terminal,
        maxLines
      );

      // Send scrollback data back to extension
      this.queueMessage(
        {
          command: 'scrollbackExtracted',
          terminalId,
          scrollbackContent,
          timestamp: Date.now(),
        },
        coordinator
      );

      log(
        `‚úÖ [MESSAGE] Scrollback extracted for terminal ${terminalId}: ${scrollbackContent.length} lines`
      );
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error extracting scrollback: ${error instanceof Error ? error.message : String(error)}`
      );

      this.queueMessage(
        {
          command: 'error',
          error: `Failed to extract scrollback: ${error instanceof Error ? error.message : String(error)}`,
          terminalId,
          timestamp: Date.now(),
        },
        coordinator
      );
    }
  }

  /**
   * Handle scrollback restoration request
   */
  private handleRestoreScrollbackMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üîÑ [MESSAGE] Handling restore scrollback message');

    const terminalId = msg.terminalId as string;
    const scrollbackContent = msg.scrollbackContent as Array<{
      content: string;
      type?: 'output' | 'input' | 'error';
      timestamp?: number;
    }>;

    if (!terminalId || !scrollbackContent) {
      log('‚ùå [MESSAGE] Invalid scrollback restore request');
      return;
    }

    try {
      // Get terminal instance
      const terminalInstance = coordinator.getTerminalInstance(terminalId);
      if (!terminalInstance) {
        throw new Error(`Terminal instance not found for ID: ${terminalId}`);
      }

      // Restore scrollback to the terminal
      this.restoreScrollbackToXterm(terminalInstance.terminal, scrollbackContent);

      // Send confirmation back to extension
      this.queueMessage(
        {
          command: 'scrollbackRestored',
          terminalId,
          restoredLines: scrollbackContent.length,
          timestamp: Date.now(),
        },
        coordinator
      );

      log(
        `‚úÖ [MESSAGE] Scrollback restored for terminal ${terminalId}: ${scrollbackContent.length} lines`
      );
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error restoring scrollback: ${error instanceof Error ? error.message : String(error)}`
      );

      this.queueMessage(
        {
          command: 'error',
          error: `Failed to restore scrollback: ${error instanceof Error ? error.message : String(error)}`,
          terminalId,
          timestamp: Date.now(),
        },
        coordinator
      );
    }
  }

  /**
   * Handle scrollback progress updates
   */
  private handleScrollbackProgressMessage(msg: MessageCommand): void {
    log('üìä [MESSAGE] Handling scrollback progress message');

    const progressInfo = msg.scrollbackProgress as {
      terminalId: string;
      progress: number;
      currentLines: number;
      totalLines: number;
      stage: 'loading' | 'decompressing' | 'restoring';
    };

    if (!progressInfo) {
      log('‚ùå [MESSAGE] No progress information provided');
      return;
    }

    // Show progress notification
    log(
      `üìä [MESSAGE] Scrollback progress: ${progressInfo.progress}% (${progressInfo.currentLines}/${progressInfo.totalLines})`
    );

    // TODO: Update progress UI if needed
  }

  /**
   * Extract scrollback content from xterm terminal (improved version)
   */
  private extractScrollbackFromXterm(
    terminal: Terminal,
    maxLines: number
  ): Array<{ content: string; type?: 'output' | 'input' | 'error'; timestamp?: number }> {
    log(`üîç [MESSAGE] Extracting scrollback from xterm terminal (max ${maxLines} lines)`);

    if (!terminal) {
      throw new Error('Terminal instance not provided');
    }

    const scrollbackLines: Array<{
      content: string;
      type?: 'output' | 'input' | 'error';
      timestamp?: number;
    }> = [];

    try {
      // Get active buffer from xterm.js
      const buffer = terminal.buffer.active;
      const bufferLength = buffer.length;
      const viewportY = buffer.viewportY;
      const baseY = buffer.baseY;

      log(
        `üîç [MESSAGE] Buffer info: length=${bufferLength}, viewportY=${viewportY}, baseY=${baseY}`
      );

      // Calculate range to extract (include scrollback + viewport)
      const startLine = Math.max(0, bufferLength - maxLines);
      const endLine = bufferLength;

      log(
        `üîç [MESSAGE] Extracting lines ${startLine} to ${endLine} (${endLine - startLine} lines)`
      );

      for (let i = startLine; i < endLine; i++) {
        try {
          const line = buffer.getLine(i);
          if (line) {
            const content = line.translateToString(true); // trim whitespace

            // Include non-empty lines and preserve some empty lines for structure
            if (content.trim() || scrollbackLines.length > 0) {
              scrollbackLines.push({
                content: content,
                type: 'output', // Default type - could be enhanced to detect input/error patterns
                timestamp: Date.now(),
              });
            }
          }
        } catch (lineError) {
          log(`‚ö†Ô∏è [MESSAGE] Error extracting line ${i}: ${String(lineError)}`);
          continue;
        }
      }

      // ÊúÄÂæå„ÅÆ‰∏çË¶Å„Å™Á©∫Ë°å„ÇíÂâäÈô§
      while (scrollbackLines.length > 0) {
        const lastLine = scrollbackLines[scrollbackLines.length - 1];
        if (!lastLine || !lastLine.content.trim()) {
          scrollbackLines.pop();
        } else {
          break;
        }
      }

      log(
        `‚úÖ [MESSAGE] Successfully extracted ${scrollbackLines.length} lines from terminal buffer`
      );
    } catch (error) {
      log(`‚ùå [MESSAGE] Error accessing terminal buffer: ${String(error)}`);
      throw error;
    }

    return scrollbackLines;
  }

  /**
   * Extract scrollback from persistence manager (if available)
   */
  private extractScrollbackFromPersistenceManager(
    coordinator: IManagerCoordinator,
    terminalId: string,
    maxLines: number
  ): Array<{ content: string; type?: 'output' | 'input' | 'error'; timestamp?: number }> {
    log(
      `üîç [MESSAGE] Attempting to extract scrollback from persistence manager for terminal ${terminalId}`
    );

    // Access persistence manager through coordinator
    const terminalManager = coordinator as {
      persistenceManager?: { serializeTerminal: (id: string, options: unknown) => unknown };
    };
    const persistenceManager = terminalManager.persistenceManager;

    if (!persistenceManager) {
      throw new Error('Persistence manager not available');
    }

    // Try to serialize the terminal using the persistence manager
    try {
      const serializedData = persistenceManager.serializeTerminal(terminalId, {
        scrollback: maxLines,
        excludeModes: false,
        excludeAltBuffer: true,
      });

      const typedData = serializedData as { content?: string };
      if (!serializedData || !typedData.content) {
        throw new Error('No serialized content returned from persistence manager');
      }

      // Parse the serialized content into line data
      const lines = typedData.content.split('\n');
      const scrollbackData: Array<{
        content: string;
        type?: 'output' | 'input' | 'error';
        timestamp?: number;
      }> = [];

      for (const line of lines) {
        if (line.trim() || scrollbackData.length > 0) {
          scrollbackData.push({
            content: line,
            type: 'output',
            timestamp: Date.now(),
          });
        }
      }

      // Remove trailing empty lines
      while (scrollbackData.length > 0) {
        const lastLine = scrollbackData[scrollbackData.length - 1];
        if (!lastLine || !lastLine.content.trim()) {
          scrollbackData.pop();
        } else {
          break;
        }
      }

      log(`‚úÖ [MESSAGE] Persistence manager extracted ${scrollbackData.length} lines`);
      return scrollbackData;
    } catch (error) {
      log(`‚ùå [MESSAGE] Error in persistence manager extraction: ${String(error)}`);
      throw error;
    }
  }

  /**
   * Restore scrollback content to xterm terminal
   */
  private restoreScrollbackToXterm(
    terminal: Terminal,
    scrollbackContent: Array<{
      content: string;
      type?: 'output' | 'input' | 'error';
      timestamp?: number;
    }>
  ): void {
    log(`üîÑ [MESSAGE] Restoring ${scrollbackContent.length} lines to terminal`);

    if (!terminal) {
      throw new Error('Terminal instance not provided');
    }

    // Clear current content and restore scrollback
    // Note: This is a simplified implementation
    // In practice, we might want to preserve the current prompt

    for (const line of scrollbackContent) {
      // Write each line to the terminal
      terminal.writeln(line.content);
    }

    log(`‚úÖ [MESSAGE] Restored ${scrollbackContent.length} lines to terminal`);
  }

  /**
   * Handle terminal serialization request
   */
  private handleSerializeTerminalMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üìã [MESSAGE] Handling serialize terminal message');

    const terminalId = msg.terminalId as string;
    const scrollbackLines = (msg.scrollbackLines as number) || 100;

    if (!terminalId) {
      log('‚ùå [MESSAGE] Invalid serialize terminal request - missing terminalId');
      return;
    }

    try {
      // Get persistence manager from the coordinator
      const terminalManager = coordinator as {
        persistenceManager?: {
          serializeTerminal: (
            id: string,
            options: unknown
          ) => { content: string; html: string } | null;
        };
      };
      const persistenceManager = terminalManager.persistenceManager;

      if (!persistenceManager) {
        throw new Error('Persistence manager not available');
      }

      // Serialize the terminal content
      const serializedData = persistenceManager.serializeTerminal(terminalId, {
        scrollback: scrollbackLines,
        excludeModes: false,
        excludeAltBuffer: true,
      });

      if (!serializedData) {
        throw new Error(`Failed to serialize terminal ${terminalId}`);
      }

      // Send response back to extension
      const content = String(serializedData.content || '');
      const html = String(serializedData.html || '');

      this.queueMessage(
        {
          command: 'serializationResponse',
          terminalId,
          serializedContent: content,
          serializedHtml: html,
          timestamp: Date.now(),
        },
        coordinator
      );

      log(`‚úÖ [MESSAGE] Terminal ${terminalId} serialized: ${content.length} chars`);
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error serializing terminal: ${error instanceof Error ? error.message : String(error)}`
      );

      this.queueMessage(
        {
          command: 'serializationError',
          terminalId,
          error: `Failed to serialize terminal: ${error instanceof Error ? error.message : String(error)}`,
          timestamp: Date.now(),
        },
        coordinator
      );
    }
  }

  /**
   * Handle restore serialized content request
   */
  private handleRestoreSerializedContentMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üîÑ [MESSAGE] Handling restore serialized content message');

    const terminalId = msg.terminalId as string;
    const serializedContent = msg.serializedContent as string;

    if (!terminalId || !serializedContent) {
      log('‚ùå [MESSAGE] Invalid restore serialized content request');
      return;
    }

    try {
      // Get persistence manager from the coordinator
      const terminalManager = coordinator as {
        persistenceManager?: { restoreTerminalContent: (id: string, content: string) => boolean };
      };
      const persistenceManager = terminalManager.persistenceManager;

      if (!persistenceManager) {
        throw new Error('Persistence manager not available');
      }

      // Restore the serialized content
      const success = persistenceManager.restoreTerminalContent(terminalId, serializedContent);

      if (!success) {
        throw new Error(`Failed to restore content to terminal ${terminalId}`);
      }

      log(
        `‚úÖ [MESSAGE] Serialized content restored to terminal ${terminalId}: ${serializedContent.length} chars`
      );
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error restoring serialized content: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * Handle terminal restore info message (WebViewÂàùÊúüÂåñÂæå„ÅÆÁä∂ÊÖãÂæ©ÂÖÉ)
   */
  private handleTerminalRestoreInfoMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üîÑ [MESSAGE] Handling terminal restore info message');

    const terminals = msg.terminals as Array<{
      id: string;
      name: string;
      number: number;
      cwd: string;
      isActive: boolean;
    }>;

    if (!terminals || !Array.isArray(terminals)) {
      log('‚ùå [MESSAGE] Invalid terminal restore info - no terminals array');
      return;
    }

    try {
      log(`üìã [MESSAGE] Processing restore info for ${terminals.length} terminals`);

      // ÂêÑ„Çø„Éº„Éü„Éä„É´„Å´„Å§„ÅÑ„Å¶Áä∂ÊÖãÂæ©ÂÖÉ„ÇíË©¶Ë°å
      for (const terminalInfo of terminals) {
        try {
          log(
            `üîÑ [MESSAGE] Attempting restore for terminal ${terminalInfo.name} (${terminalInfo.id})`
          );

          // ÁèæÂú®„ÅÆ„Çø„Éº„Éü„Éä„É´‰∏ÄË¶ß„Å®ÁÖßÂêà„Åó„Å¶„ÄÅÂØæÂøú„Åô„Çã„Çø„Éº„Éü„Éä„É´„ÇíË¶ã„Å§„Åë„Çã
          const existingTerminals = coordinator.getAllTerminalInstances();
          const matchingTerminal = Array.from(existingTerminals.values()).find(
            (t, index) => index === terminalInfo.number - 1 // Terminal numbering starts from 1
          );

          if (matchingTerminal) {
            log(`‚úÖ [MESSAGE] Found matching terminal for ${terminalInfo.name}`);

            // Persistence Manager„Çí‰ΩøÁî®„Åó„Å¶„Ç≥„É≥„ÉÜ„É≥„ÉÑÂæ©ÂÖÉ
            const terminalManager = coordinator as {
              persistenceManager?: { restoreTerminalFromStorage: (id: string) => boolean };
            };
            const persistenceManager = terminalManager.persistenceManager;

            if (persistenceManager) {
              // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶„Çø„Éº„Éü„Éä„É´„ÅåÂÆåÂÖ®„Å´ÂàùÊúüÂåñ„Åï„Çå„Çã„ÅÆ„ÇíÂæÖ„Å§
              setTimeout(() => {
                const restored = persistenceManager.restoreTerminalFromStorage(matchingTerminal.id);
                if (restored) {
                  log(`‚úÖ [MESSAGE] Content restored for terminal ${terminalInfo.name}`);
                } else {
                  log(`‚ö†Ô∏è [MESSAGE] No saved content for terminal ${terminalInfo.name}`);
                }
              }, 100);
            }

            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Éº„Éü„Éä„É´„ÅÆË®≠ÂÆö
            if (terminalInfo.isActive) {
              coordinator.setActiveTerminalId(matchingTerminal.id);
              log(`üéØ [MESSAGE] Set active terminal: ${terminalInfo.name}`);
            }
          } else {
            log(`‚ö†Ô∏è [MESSAGE] No matching terminal found for ${terminalInfo.name}`);
          }
        } catch (terminalError) {
          log(
            `‚ùå [MESSAGE] Error processing terminal ${terminalInfo.name}: ${String(terminalError)}`
          );
        }
      }

      log(`‚úÖ [MESSAGE] Terminal restore info processing completed`);
    } catch (error) {
      log(
        `‚ùå [MESSAGE] Error processing terminal restore info: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  /**
   * Handle save all terminal sessions message
   */
  private handleSaveAllTerminalSessionsMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üíæ [MESSAGE] Handling save all terminal sessions message');

    try {
      const terminalManager = coordinator as {
        persistenceManager?: { saveTerminalContent: (id: string) => void };
      };
      const persistenceManager = terminalManager.persistenceManager;

      if (!persistenceManager) {
        log('‚ö†Ô∏è [MESSAGE] No persistence manager available');
        return;
      }

      // ÂÖ®„Çø„Éº„Éü„Éä„É´„ÅÆ‰øùÂ≠ò„ÇíÂº∑Âà∂ÂÆüË°å
      const terminals = coordinator.getAllTerminalInstances();
      let savedCount = 0;

      for (const [terminalId] of terminals) {
        try {
          // ÊâãÂãï„Åß‰øùÂ≠ò„É°„ÇΩ„ÉÉ„Éâ„ÇíÂëº„Å≥Âá∫„Åô
          persistenceManager.saveTerminalContent(terminalId);
          savedCount++;
        } catch (error) {
          log(`‚ùå [MESSAGE] Failed to save terminal ${terminalId}:`, error);
        }
      }

      log(`‚úÖ [MESSAGE] Saved ${savedCount}/${terminals.size} terminal sessions`);
    } catch (error) {
      log(`‚ùå [MESSAGE] Error saving all terminal sessions: ${String(error)}`);
    }
  }

  /**
   * Handle request terminal serialization message
   */
  private handleRequestTerminalSerializationMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üìã [MESSAGE] Handling request terminal serialization message');

    try {
      const terminalIds = msg.terminalIds as string[] || [];
      log(`üìã [MESSAGE] Serializing ${terminalIds.length} terminals for session save`);

      const terminalManager = coordinator as {
        persistenceManager?: { 
          serializeTerminal: (id: string) => { content: string; html?: string } | null;
          serializeAllTerminals: (scrollback?: number) => Map<string, { content: string; html?: string }>;
        };
      };
      const persistenceManager = terminalManager.persistenceManager;

      if (!persistenceManager) {
        log('‚ö†Ô∏è [MESSAGE] No persistence manager available for serialization');
        // Send empty response to prevent timeout
        this.postMessageToExtension({
          command: 'terminalSerializationResponse',
          serializedData: {},
          terminalCount: 0,
          timestamp: Date.now(),
        });
        return;
      }

      // „Çø„Éº„Éü„Éä„É´„Çí„Ç∑„É™„Ç¢„É©„Ç§„Ç∫
      const serializedData: Record<string, string> = {};
      
      if (terminalIds.length === 0) {
        // ÂÖ®„Çø„Éº„Éü„Éä„É´„Çí„Ç∑„É™„Ç¢„É©„Ç§„Ç∫
        const allSerializedData = persistenceManager.serializeAllTerminals(1000);
        for (const [terminalId, data] of allSerializedData) {
          serializedData[terminalId] = data.content;
          log(`üìã [MESSAGE] Serialized terminal ${terminalId}: ${data.content.length} chars`);
        }
      } else {
        // ÊåáÂÆö„Åï„Çå„Åü„Çø„Éº„Éü„Éä„É´„ÅÆ„Åø„Ç∑„É™„Ç¢„É©„Ç§„Ç∫
        for (const terminalId of terminalIds) {
          const result = persistenceManager.serializeTerminal(terminalId, { scrollback: 1000 });
          if (result && result.content) {
            serializedData[terminalId] = result.content;
            log(`üìã [MESSAGE] Serialized terminal ${terminalId}: ${result.content.length} chars`);
          } else {
            log(`‚ö†Ô∏è [MESSAGE] No content for terminal ${terminalId}, using empty serialization`);
            serializedData[terminalId] = '';
          }
        }
      }

      // Extension „Å´ÁµêÊûú„ÇíÈÄÅ‰ø°
      log(`üìã [MESSAGE] Sending serialization response to Extension with ${Object.keys(serializedData).length} terminals`);
      this.postMessageToExtension({
        command: 'terminalSerializationResponse',
        serializedData,
        terminalCount: Object.keys(serializedData).length,
        timestamp: Date.now(),
      });

      log(`‚úÖ [MESSAGE] Successfully serialized ${Object.keys(serializedData).length} terminals`);
    } catch (error) {
      log(`‚ùå [MESSAGE] Error serializing terminals: ${String(error)}`);
      // Send error response to prevent timeout
      this.postMessageToExtension({
        command: 'terminalSerializationResponse',
        serializedData: {},
        terminalCount: 0,
        error: String(error),
        timestamp: Date.now(),
      });
    }
  }

  /**
   * Handle restore terminal serialization message
   */
  private handleRestoreTerminalSerializationMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üîÑ [MESSAGE] Handling restore terminal serialization message');

    try {
      const terminalData = msg.terminalData as Array<{
        id: string;
        name: string;
        serializedContent: string;
        isActive: boolean;
      }> || [];

      log(`üîÑ [MESSAGE] Restoring ${terminalData.length} terminals from serialized content`);

      const terminalManager = coordinator as {
        persistenceManager?: { 
          restoreTerminalContent: (id: string, content: string) => boolean;
        };
      };
      const persistenceManager = terminalManager.persistenceManager;

      if (!persistenceManager) {
        log('‚ö†Ô∏è [MESSAGE] No persistence manager available for restoration');
        return;
      }

      let restoredCount = 0;

      // ÂêÑ„Çø„Éº„Éü„Éä„É´„ÅÆ„Ç∑„É™„Ç¢„É©„Ç§„Ç∫„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂæ©ÂÖÉ
      for (const terminal of terminalData) {
        if (terminal.serializedContent && terminal.serializedContent.length > 0) {
          try {
            log(`üîÑ [MESSAGE] Restoring terminal ${terminal.id} with ${terminal.serializedContent.length} chars`);
            const restored = persistenceManager.restoreTerminalContent(
              terminal.id, 
              terminal.serializedContent
            );
            
            if (restored) {
              restoredCount++;
              log(`‚úÖ [MESSAGE] Successfully restored terminal ${terminal.id} (${terminal.name})`);
            } else {
              log(`‚ö†Ô∏è [MESSAGE] Failed to restore terminal ${terminal.id} (${terminal.name}) - restore method returned false`);
            }
          } catch (error) {
            log(`‚ùå [MESSAGE] Error restoring terminal ${terminal.id}:`, error);
          }
        } else {
          log(`‚ö†Ô∏è [MESSAGE] No serialized content for terminal ${terminal.id} (${terminal.name}), skipping`);
        }
      }

      log(`‚úÖ [MESSAGE] Terminal serialization restoration completed: ${restoredCount}/${terminalData.length} terminals restored`);

      // Send completion notification to Extension
      this.postMessageToExtension({
        command: 'terminalSerializationRestoreComplete',
        restoredCount,
        totalCount: terminalData.length,
        timestamp: Date.now(),
      });
    } catch (error) {
      log(`‚ùå [MESSAGE] Error restoring terminal serialization: ${String(error)}`);
      
      // Send error notification to Extension
      this.postMessageToExtension({
        command: 'terminalSerializationRestoreComplete',
        restoredCount: 0,
        totalCount: 0,
        error: String(error),
        timestamp: Date.now(),
      });
    }
  }

  /**
   * Handle session restoration data response from Extension (REFACTORED)
   * 
   * Improved for better error handling, type safety, and maintainability
   * Follows TDD principles and defensive programming practices
   */
  private handleSessionRestorationDataMessage(
    msg: MessageCommand,
    coordinator: IManagerCoordinator
  ): void {
    log('üîÑ [MESSAGE] Handling session restoration data message');

    try {
      const { terminalId, sessionData, success } = this._validateSessionRestorationMessage(msg);
      
      if (!success) {
        return; // Error already logged in validation
      }

      log(`üîÑ [MESSAGE] Received session data for terminal ${terminalId}: ${sessionData ? 'found' : 'not found'}`);

      if (sessionData) {
        this._restoreTerminalFromSessionData(terminalId, sessionData, coordinator);
      } else {
        this._handleNoSessionDataAvailable(terminalId);
      }
    } catch (error) {
      log(`‚ùå [MESSAGE] Error handling session restoration data: ${String(error)}`);
    }
  }

  /**
   * Validate session restoration message data (REFACTORED)
   * 
   * Centralized validation with proper error handling and logging
   */
  private _validateSessionRestorationMessage(msg: MessageCommand): {
    terminalId: string;
    sessionData: SessionDataPayload | null;
    success: boolean;
  } {
    const terminalId = msg.terminalId as string;
    const sessionData = msg.sessionData as SessionDataPayload | null;

    if (!terminalId) {
      log('‚ö†Ô∏è [MESSAGE] No terminalId in session restoration data message');
      return { terminalId: '', sessionData: null, success: false };
    }

    return { terminalId, sessionData, success: true };
  }

  /**
   * Restore terminal from session data (REFACTORED)
   * 
   * Extracted for better testability and single responsibility
   */
  private _restoreTerminalFromSessionData(
    terminalId: string,
    sessionData: SessionDataPayload,
    coordinator: IManagerCoordinator
  ): void {
    const terminalManager = coordinator as {
      persistenceManager?: { 
        restoreTerminalFromStorage: (id: string) => boolean;
      };
    };

    const persistenceManager = terminalManager.persistenceManager;

    if (!persistenceManager) {
      log('‚ö†Ô∏è [MESSAGE] No persistence manager available for session restoration');
      return;
    }

    // Try to restore from WebView storage
    const restored = persistenceManager.restoreTerminalFromStorage(terminalId);
    
    if (restored) {
      log(`‚úÖ [MESSAGE] Successfully restored terminal ${terminalId} from WebView storage`);
    } else {
      log(`‚ö†Ô∏è [MESSAGE] No WebView storage data for terminal ${terminalId}, terminal will start fresh`);
    }
  }

  /**
   * Handle case when no session data is available (REFACTORED)
   * 
   * Clear logging and potential future extension points
   */
  private _handleNoSessionDataAvailable(terminalId: string): void {
    log(`üì≠ [MESSAGE] No session data available for terminal ${terminalId}, terminal will start fresh`);
    // Future enhancement: Could trigger notification to user about fresh start
  }

  public dispose(): void {
    log('üßπ [MESSAGE] Disposing message manager');

    // Clear all queues and reset state
    this.messageQueue = [];
    this.highPriorityQueue = [];
    this.isProcessingQueue = false;
    this.queueLock = false;

    log('‚úÖ [MESSAGE] Message manager disposed');
  }
}

/**
 * Type definition for session data payload (REFACTORED)
 * 
 * Better type safety and documentation
 */
interface SessionDataPayload {
  id: string;
  name: string;
  number: number;
  cwd: string;
  isActive: boolean;
}
