[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleActivateCopilot called
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 📤 [DEBUG] Sending file reference to Copilot: "#file:src/test.ts  "
[DEBUG] 🔧 [EXTENSION] ✅ [DEBUG] Successfully activated GitHub Copilot Chat with file reference
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleActivateCopilot called
[DEBUG] 🔧 [EXTENSION] ⚠️ [DEBUG] No active editor found, activating Copilot without file reference
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleActivateCopilot called
[DEBUG] 🔧 [EXTENSION] 🔧 [DEBUG] GitHub Copilot integration is disabled by user setting
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleActivateCopilot called
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 📤 [DEBUG] Sending file reference to Copilot: "#file:src/test.ts  "
[DEBUG] 🔧 [EXTENSION] ✅ [DEBUG] Successfully activated GitHub Copilot Chat with file reference
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleActivateCopilot called
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 📤 [DEBUG] Sending file reference to Copilot: "#file:src/test.ts  "
[DEBUG] 🔧 [EXTENSION] ✅ [DEBUG] Successfully activated GitHub Copilot Chat with file reference
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] File selection detected: lines 5-5
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Creating file reference: #file:src/test.ts
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] File selection detected: lines 3-7
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Selection detected: L5-L5
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Selection detected: L3-L7
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleSendAtMention called with CLI Agent integration
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Found 1 connected CLI agents
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Agent 0: terminalId=terminal-1, type=claude
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Current globally active agent: undefined
[DEBUG] 🔧 [EXTENSION] ✅ [DEBUG] File reference sent to 1 CLI agents
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleSendAtMention called with CLI Agent integration
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Selection detected: L3-L7
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Found 1 connected CLI agents
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Agent 0: terminalId=terminal-1, type=claude
[DEBUG] 🔧 [EXTENSION] 🔍 [DEBUG] Current globally active agent: undefined
[DEBUG] 🔧 [EXTENSION] ✅ [DEBUG] File reference sent to 1 CLI agents
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleSendAtMention called with CLI Agent integration
[DEBUG] 🔧 [EXTENSION] ⚠️ [WARN] No active editor found for @mention
[DEBUG] 🔧 [EXTENSION] 🚀 [DEBUG] handleSendAtMention called with CLI Agent integration
[DEBUG] 🔧 [EXTENSION] 🔧 [DEBUG] CLI Agent integration is disabled by user setting
{
  "stats": {
    "suites": 46,
    "tests": 115,
    "passes": 83,
    "pending": 0,
    "failures": 34,
    "start": "2025-07-27T21:12:14.842Z",
    "end": "2025-07-27T21:12:15.122Z",
    "duration": 280
  },
  "tests": [
    {
      "title": "should activate Copilot Chat and send file reference when file is open",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should activate Copilot Chat and send file reference when file is open",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should activate Copilot Chat without file reference when no file is open",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should activate Copilot Chat without file reference when no file is open",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show information message when integration is disabled",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should show information message when integration is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle command execution errors gracefully",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should handle command execution errors gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix even with selection",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix even with selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix for multi-line selection",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix for multi-line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true when setting is enabled",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return true when setting is enabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false when setting is disabled",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return false when setting is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value (true) when setting is not found",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return default value (true) when setting is not found",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info without selection when no text is selected",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info without selection when no text is selected",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info with single line selection",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info with single line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info with multi-line selection",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info with multi-line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return null when no active editor",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return null when no active editor",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference without line numbers when no selection",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference without line numbers when no selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with single line number",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference with single line number",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with line range",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference with line range",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should send file reference without line numbers when no selection",
      "fullTitle": "FileReferenceCommand handleSendAtMention should send file reference without line numbers when no selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should send file reference with line numbers when text is selected",
      "fullTitle": "FileReferenceCommand handleSendAtMention should send file reference with line numbers when text is selected",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show warning when no active editor",
      "fullTitle": "FileReferenceCommand handleSendAtMention should show warning when no active editor",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show warning when CLI Agent integration is disabled",
      "fullTitle": "FileReferenceCommand handleSendAtMention should show warning when CLI Agent integration is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should initialize with default state",
      "fullTitle": "SettingsPanel constructor should initialize with default state",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should initialize without callback options",
      "fullTitle": "SettingsPanel constructor should initialize without callback options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show settings panel",
      "fullTitle": "SettingsPanel show should show settings panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 24,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should hide panel if already visible",
      "fullTitle": "SettingsPanel show should hide panel if already visible",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 6,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should populate settings when provided",
      "fullTitle": "SettingsPanel show should populate settings when provided",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 5,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create settings content with correct structure",
      "fullTitle": "SettingsPanel show should create settings content with correct structure",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle error gracefully",
      "fullTitle": "SettingsPanel show should handle error gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 7,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should hide settings panel",
      "fullTitle": "SettingsPanel hide should hide settings panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call onClose callback",
      "fullTitle": "SettingsPanel hide should call onClose callback",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle hide when panel not visible",
      "fullTitle": "SettingsPanel hide should handle hide when panel not visible",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle error gracefully",
      "fullTitle": "SettingsPanel hide should handle error gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should update font size value display when slider changes",
      "fullTitle": "SettingsPanel font size control should update font size value display when slider changes",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct slider range",
      "fullTitle": "SettingsPanel font size control should have correct slider range",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when close button is clicked",
      "fullTitle": "SettingsPanel button interactions should close panel when close button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should apply settings when apply button is clicked",
      "fullTitle": "SettingsPanel button interactions should apply settings when apply button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should reset settings when reset button is clicked",
      "fullTitle": "SettingsPanel button interactions should reset settings when reset button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when Escape key is pressed",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should close panel when Escape key is pressed",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not close panel when other keys are pressed",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should not close panel when other keys are pressed",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when background is clicked",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should close panel when background is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not close panel when content is clicked",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should not close panel when content is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should collect current settings correctly",
      "fullTitle": "SettingsPanel settings collection should collect current settings correctly",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should use defaults for missing elements",
      "fullTitle": "SettingsPanel settings collection should use defaults for missing elements",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle missing settings gracefully",
      "fullTitle": "SettingsPanel settings population should handle missing settings gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle partial settings",
      "fullTitle": "SettingsPanel settings population should handle partial settings",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle invalid settings gracefully",
      "fullTitle": "SettingsPanel settings population should handle invalid settings gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct font family options",
      "fullTitle": "SettingsPanel font family options should have correct font family options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct theme options",
      "fullTitle": "SettingsPanel theme options should have correct theme options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should reset all settings to defaults",
      "fullTitle": "SettingsPanel reset to defaults should reset all settings to defaults",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should clean up panel",
      "fullTitle": "SettingsPanel dispose should clean up panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 7,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle dispose when panel not shown",
      "fullTitle": "SettingsPanel dispose should handle dispose when panel not shown",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set up animation styles when showing",
      "fullTitle": "SettingsPanel panel animations should set up animation styles when showing",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have proper labels for form controls",
      "fullTitle": "SettingsPanel accessibility features should have proper labels for form controls",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have close button with title attribute",
      "fullTitle": "SettingsPanel accessibility features should have close button with title attribute",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect VS Code altClickMovesCursor setting",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should detect VS Code altClickMovesCursor setting",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should disable Alt+Click when settings are not met",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should disable Alt+Click when settings are not met",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should disable Alt+Click when multiCursorModifier is not alt",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should disable Alt+Click when multiCursorModifier is not alt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect CLI Agent output patterns",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should detect CLI Agent output patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not trigger on normal terminal output",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should not trigger on normal terminal output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect high-frequency output scenarios",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should detect high-frequency output scenarios",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should configure xterm.js with altClickMovesCursor option",
      "fullTitle": "Alt+Click Cursor Positioning xterm.js Integration should configure xterm.js with altClickMovesCursor option",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle dynamic settings updates",
      "fullTitle": "Alt+Click Cursor Positioning xterm.js Integration should handle dynamic settings updates",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should change cursor style on Alt key press",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should change cursor style on Alt key press",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should restore cursor style on Alt key release",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should restore cursor style on Alt key release",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle Alt+Click events properly",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should handle Alt+Click events properly",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should prevent normal clicks from interfering",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should prevent normal clicks from interfering",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should use optimized buffering during CLI Agent execution",
      "fullTitle": "Alt+Click Cursor Positioning Performance Optimization should use optimized buffering during CLI Agent execution",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle large output chunks immediately",
      "fullTitle": "Alt+Click Cursor Positioning Performance Optimization should handle large output chunks immediately",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should provide visual feedback for Alt+Click availability",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should provide visual feedback for Alt+Click availability",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should notify users when Alt+Click is temporarily disabled",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should notify users when Alt+Click is temporarily disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show re-enablement notification",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should show re-enablement notification",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Claude Code from command",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Claude Code from command",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Claude Code with arguments",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Claude Code with arguments",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Gemini from command",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Gemini from command",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Gemini with arguments",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Gemini with arguments",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not detect from unrelated commands",
      "fullTitle": "CliAgentDetectionService detectFromCommand should not detect from unrelated commands",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: (0 , chai_1.expect)(...).to.be.null is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:37:66)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "(0 , chai_1.expect)(...).to.be.null is not a function"
      }
    },
    {
      "title": "should handle empty or invalid input",
      "fullTitle": "CliAgentDetectionService detectFromCommand should handle empty or invalid input",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: (0 , chai_1.expect)(...).to.be.null is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:43:64)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "(0 , chai_1.expect)(...).to.be.null is not a function"
      }
    },
    {
      "title": "should detect Claude Code from startup output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Claude Code from startup output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:52:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Claude Code from conversation patterns",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Claude Code from conversation patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:58:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Gemini from startup output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Gemini from startup output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:64:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Gemini from conversation patterns",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Gemini from conversation patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:70:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should not detect from unrelated output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should not detect from unrelated output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:75:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect keyboard interrupt",
      "fullTitle": "CliAgentDetectionService detectExit should detect keyboard interrupt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:82:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect process termination",
      "fullTitle": "CliAgentDetectionService detectExit should detect process termination",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:88:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect kill signals",
      "fullTitle": "CliAgentDetectionService detectExit should detect kill signals",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:94:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect command not found (common when CLI agent is killed)",
      "fullTitle": "CliAgentDetectionService detectExit should detect command not found (common when CLI agent is killed)",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:102:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect goodbye messages",
      "fullTitle": "CliAgentDetectionService detectExit should detect goodbye messages",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:108:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect exit commands",
      "fullTitle": "CliAgentDetectionService detectExit should detect exit commands",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:113:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect CTRL+C patterns",
      "fullTitle": "CliAgentDetectionService detectExit should detect CTRL+C patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:122:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect connection/socket errors",
      "fullTitle": "CliAgentDetectionService detectExit should detect connection/socket errors",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:128:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should not detect from normal output",
      "fullTitle": "CliAgentDetectionService detectExit should not detect from normal output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:135:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should handle short outputs",
      "fullTitle": "CliAgentDetectionService detectExit should handle short outputs",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:141:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect bash prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect bash prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:150:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should detect zsh prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect zsh prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:155:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should detect full user@host prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect full user@host prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:160:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should not detect from non-prompt output",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should not detect from non-prompt output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:165:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should handle empty input",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should handle empty input",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:169:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should return all patterns for debugging",
      "fullTitle": "CliAgentDetectionService getPatterns should return all patterns for debugging",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.getPatterns is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:176:41)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.getPatterns is not a function"
      }
    },
    {
      "title": "should activate first agent as CONNECTED",
      "fullTitle": "CliAgentStateService activateAgent should activate first agent as CONNECTED",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should make new agent CONNECTED and previous one DISCONNECTED",
      "fullTitle": "CliAgentStateService activateAgent should make new agent CONNECTED and previous one DISCONNECTED",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should emit state change events",
      "fullTitle": "CliAgentStateService activateAgent should emit state change events",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected spy to have been called with arguments {\n  terminalId: 'terminal1',\n  type: 'claude',\n  status: 'connected',\n  previousStatus: 'none'\n}",
        "showDiff": false,
        "stack": "AssertionError: expected spy to have been called with arguments {\n  terminalId: 'terminal1',\n  type: 'claude',\n  status: 'connected',\n  previousStatus: 'none'\n}\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:50:45)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should deactivate single agent",
      "fullTitle": "CliAgentStateService deactivateAgent should deactivate single agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "Error: Invalid Chai property: equalNull\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:65:62)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Invalid Chai property: equalNull"
      }
    },
    {
      "title": "should promote DISCONNECTED agent when CONNECTED is deactivated",
      "fullTitle": "CliAgentStateService deactivateAgent should promote DISCONNECTED agent when CONNECTED is deactivated",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'disconnected' to equal 'connected'",
        "showDiff": true,
        "actual": "disconnected",
        "expected": "connected",
        "operator": "strictEqual",
        "stack": "AssertionError: expected 'disconnected' to equal 'connected'\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:79:54)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should promote most recent DISCONNECTED agent",
      "fullTitle": "CliAgentStateService deactivateAgent should promote most recent DISCONNECTED agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'disconnected' to equal 'connected'",
        "showDiff": true,
        "actual": "disconnected",
        "expected": "connected",
        "operator": "strictEqual",
        "stack": "AssertionError: expected 'disconnected' to equal 'connected'\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:102:54)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should emit state change events for deactivation and promotion",
      "fullTitle": "CliAgentStateService deactivateAgent should emit state change events for deactivation and promotion",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: onStateChangeSpy.mockClear is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:109:24)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "onStateChangeSpy.mockClear is not a function"
      }
    },
    {
      "title": "should maintain single CONNECTED rule",
      "fullTitle": "CliAgentStateService invariants should maintain single CONNECTED rule",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should never have all agents DISCONNECTED when agents exist",
      "fullTitle": "CliAgentStateService invariants should never have all agents DISCONNECTED when agents exist",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected [] to have a length of 1 but got +0",
        "showDiff": true,
        "actual": "0",
        "expected": "1",
        "stack": "AssertionError: expected [] to have a length of 1 but got +0\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:154:39)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should handle deactivating non-existent agent",
      "fullTitle": "CliAgentStateService edge cases should handle deactivating non-existent agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle reactivating same agent",
      "fullTitle": "CliAgentStateService edge cases should handle reactivating same agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: onStateChangeSpy.mockClear is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:166:24)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "onStateChangeSpy.mockClear is not a function"
      }
    },
    {
      "title": "should handle cleanupTerminal",
      "fullTitle": "CliAgentStateService edge cases should handle cleanupTerminal",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "初期状態はNONE",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 初期状態はNONE",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "CLI Agent起動でCONNECTEDに遷移",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 CLI Agent起動でCONNECTEDに遷移",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 2,
      "currentRetry": 0,
      "err": {
        "stack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n0 !== 1\n\n    at Context.<anonymous> (src/test/unit/integration/SecondaryCliAgentDetector.test.ts:46:14)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Expected values to be strictly equal:\n\n0 !== 1\n",
        "generatedMessage": true,
        "name": "AssertionError",
        "code": "ERR_ASSERTION",
        "actual": "0",
        "expected": "1",
        "operator": "strictEqual"
      }
    },
    {
      "title": "CLI Agent終了でNONEに遷移",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 CLI Agent終了でNONEに遷移",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'connected'\n- 'none'\n\n    at Context.<anonymous> (src/test/unit/integration/SecondaryCliAgentDetector.test.ts:62:14)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Expected values to be strictly equal:\n+ actual - expected\n\n+ 'connected'\n- 'none'\n",
        "generatedMessage": true,
        "name": "AssertionError",
        "code": "ERR_ASSERTION",
        "actual": "connected",
        "expected": "none",
        "operator": "strictEqual"
      }
    },
    {
      "title": "新しいCLI Agent起動時、既存のCONNECTEDはDISCONNECTEDに変更",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 相互排他制御 新しいCLI Agent起動時、既存のCONNECTEDはDISCONNECTEDに変更",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "異なるタイプのCLI Agent間でも相互排他が動作",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 相互排他制御 異なるタイプのCLI Agent間でも相互排他が動作",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {
        "stack": "TypeError: [Function noop] is not a spy or a call to a spy!\n    at assertCanWorkWith (node_modules/sinon-chai/lib/sinon-chai.js:53:19)\n    at Proxy.<anonymous> (node_modules/sinon-chai/lib/sinon-chai.js:98:13)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Timeout._onTimeout (src/test/unit/commands/FileReferenceCommand.test.ts:192:62)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
        "message": "[Function noop] is not a spy or a call to a spy!",
        "uncaught": true
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "\"before each\" hook for \"should return terminal configuration with defaults\"",
      "fullTitle": "ConfigManager \"before each\" hook for \"should return terminal configuration with defaults\"",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/config/ConfigManager.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: Attempted to wrap getConfiguration which is already stubbed\n    at checkWrappedMethod (node_modules/sinon/lib/sinon/util/core/wrap-method.js:74:21)\n    at wrapMethod (node_modules/sinon/lib/sinon/util/core/wrap-method.js:132:13)\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:130:44)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (src/test/unit/config/ConfigManager.test.ts:20:13)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Attempted to wrap getConfiguration which is already stubbed"
      }
    },
    {
      "title": "should not detect from unrelated commands",
      "fullTitle": "CliAgentDetectionService detectFromCommand should not detect from unrelated commands",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: (0 , chai_1.expect)(...).to.be.null is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:37:66)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "(0 , chai_1.expect)(...).to.be.null is not a function"
      }
    },
    {
      "title": "should handle empty or invalid input",
      "fullTitle": "CliAgentDetectionService detectFromCommand should handle empty or invalid input",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: (0 , chai_1.expect)(...).to.be.null is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:43:64)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "(0 , chai_1.expect)(...).to.be.null is not a function"
      }
    },
    {
      "title": "should detect Claude Code from startup output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Claude Code from startup output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:52:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Claude Code from conversation patterns",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Claude Code from conversation patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:58:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Gemini from startup output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Gemini from startup output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:64:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect Gemini from conversation patterns",
      "fullTitle": "CliAgentDetectionService detectFromOutput should detect Gemini from conversation patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:70:39)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should not detect from unrelated output",
      "fullTitle": "CliAgentDetectionService detectFromOutput should not detect from unrelated output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectFromOutput is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:75:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectFromOutput is not a function"
      }
    },
    {
      "title": "should detect keyboard interrupt",
      "fullTitle": "CliAgentDetectionService detectExit should detect keyboard interrupt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:82:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect process termination",
      "fullTitle": "CliAgentDetectionService detectExit should detect process termination",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:88:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect kill signals",
      "fullTitle": "CliAgentDetectionService detectExit should detect kill signals",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:94:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect command not found (common when CLI agent is killed)",
      "fullTitle": "CliAgentDetectionService detectExit should detect command not found (common when CLI agent is killed)",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:102:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect goodbye messages",
      "fullTitle": "CliAgentDetectionService detectExit should detect goodbye messages",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:108:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect exit commands",
      "fullTitle": "CliAgentDetectionService detectExit should detect exit commands",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:113:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect CTRL+C patterns",
      "fullTitle": "CliAgentDetectionService detectExit should detect CTRL+C patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:122:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect connection/socket errors",
      "fullTitle": "CliAgentDetectionService detectExit should detect connection/socket errors",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:128:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should not detect from normal output",
      "fullTitle": "CliAgentDetectionService detectExit should not detect from normal output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:135:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should handle short outputs",
      "fullTitle": "CliAgentDetectionService detectExit should handle short outputs",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectExit is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:141:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectExit is not a function"
      }
    },
    {
      "title": "should detect bash prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect bash prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:150:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should detect zsh prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect zsh prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:155:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should detect full user@host prompt",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should detect full user@host prompt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:160:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should not detect from non-prompt output",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should not detect from non-prompt output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:165:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should handle empty input",
      "fullTitle": "CliAgentDetectionService detectShellPromptReturn should handle empty input",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.detectShellPromptReturn is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:169:31)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.detectShellPromptReturn is not a function"
      }
    },
    {
      "title": "should return all patterns for debugging",
      "fullTitle": "CliAgentDetectionService getPatterns should return all patterns for debugging",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: detectionService.getPatterns is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentDetectionService.test.ts:176:41)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "detectionService.getPatterns is not a function"
      }
    },
    {
      "title": "should emit state change events",
      "fullTitle": "CliAgentStateService activateAgent should emit state change events",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected spy to have been called with arguments {\n  terminalId: 'terminal1',\n  type: 'claude',\n  status: 'connected',\n  previousStatus: 'none'\n}",
        "showDiff": false,
        "stack": "AssertionError: expected spy to have been called with arguments {\n  terminalId: 'terminal1',\n  type: 'claude',\n  status: 'connected',\n  previousStatus: 'none'\n}\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:50:45)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should deactivate single agent",
      "fullTitle": "CliAgentStateService deactivateAgent should deactivate single agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "Error: Invalid Chai property: equalNull\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:65:62)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Invalid Chai property: equalNull"
      }
    },
    {
      "title": "should promote DISCONNECTED agent when CONNECTED is deactivated",
      "fullTitle": "CliAgentStateService deactivateAgent should promote DISCONNECTED agent when CONNECTED is deactivated",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'disconnected' to equal 'connected'",
        "showDiff": true,
        "actual": "disconnected",
        "expected": "connected",
        "operator": "strictEqual",
        "stack": "AssertionError: expected 'disconnected' to equal 'connected'\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:79:54)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should promote most recent DISCONNECTED agent",
      "fullTitle": "CliAgentStateService deactivateAgent should promote most recent DISCONNECTED agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'disconnected' to equal 'connected'",
        "showDiff": true,
        "actual": "disconnected",
        "expected": "connected",
        "operator": "strictEqual",
        "stack": "AssertionError: expected 'disconnected' to equal 'connected'\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:102:54)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should emit state change events for deactivation and promotion",
      "fullTitle": "CliAgentStateService deactivateAgent should emit state change events for deactivation and promotion",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: onStateChangeSpy.mockClear is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:109:24)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "onStateChangeSpy.mockClear is not a function"
      }
    },
    {
      "title": "should never have all agents DISCONNECTED when agents exist",
      "fullTitle": "CliAgentStateService invariants should never have all agents DISCONNECTED when agents exist",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected [] to have a length of 1 but got +0",
        "showDiff": true,
        "actual": "0",
        "expected": "1",
        "stack": "AssertionError: expected [] to have a length of 1 but got +0\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:154:39)\n    at processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "should handle reactivating same agent",
      "fullTitle": "CliAgentStateService edge cases should handle reactivating same agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "TypeError: onStateChangeSpy.mockClear is not a function\n    at Context.<anonymous> (src/test/unit/integration/CliAgentStateService.test.ts:166:24)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "onStateChangeSpy.mockClear is not a function"
      }
    },
    {
      "title": "CLI Agent起動でCONNECTEDに遷移",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 CLI Agent起動でCONNECTEDに遷移",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 2,
      "currentRetry": 0,
      "err": {
        "stack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n0 !== 1\n\n    at Context.<anonymous> (src/test/unit/integration/SecondaryCliAgentDetector.test.ts:46:14)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Expected values to be strictly equal:\n\n0 !== 1\n",
        "generatedMessage": true,
        "name": "AssertionError",
        "code": "ERR_ASSERTION",
        "actual": "0",
        "expected": "1",
        "operator": "strictEqual"
      }
    },
    {
      "title": "CLI Agent終了でNONEに遷移",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 CLI Agent終了でNONEに遷移",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'connected'\n- 'none'\n\n    at Context.<anonymous> (src/test/unit/integration/SecondaryCliAgentDetector.test.ts:62:14)\n    at processImmediate (node:internal/timers:485:21)",
        "message": "Expected values to be strictly equal:\n+ actual - expected\n\n+ 'connected'\n- 'none'\n",
        "generatedMessage": true,
        "name": "AssertionError",
        "code": "ERR_ASSERTION",
        "actual": "connected",
        "expected": "none",
        "operator": "strictEqual"
      }
    },
    {
      "title": "異なるタイプのCLI Agent間でも相互排他が動作",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 相互排他制御 異なるタイプのCLI Agent間でも相互排他が動作",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {
        "stack": "TypeError: [Function noop] is not a spy or a call to a spy!\n    at assertCanWorkWith (node_modules/sinon-chai/lib/sinon-chai.js:53:19)\n    at Proxy.<anonymous> (node_modules/sinon-chai/lib/sinon-chai.js:98:13)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Timeout._onTimeout (src/test/unit/commands/FileReferenceCommand.test.ts:192:62)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
        "message": "[Function noop] is not a spy or a call to a spy!",
        "uncaught": true
      }
    }
  ],
  "passes": [
    {
      "title": "should activate Copilot Chat and send file reference when file is open",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should activate Copilot Chat and send file reference when file is open",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should activate Copilot Chat without file reference when no file is open",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should activate Copilot Chat without file reference when no file is open",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show information message when integration is disabled",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should show information message when integration is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle command execution errors gracefully",
      "fullTitle": "CopilotIntegrationCommand handleActivateCopilot should handle command execution errors gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix even with selection",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix even with selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with #file: prefix for multi-line selection",
      "fullTitle": "CopilotIntegrationCommand formatCopilotFileReference should format file reference with #file: prefix for multi-line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true when setting is enabled",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return true when setting is enabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false when setting is disabled",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return false when setting is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value (true) when setting is not found",
      "fullTitle": "CopilotIntegrationCommand isGitHubCopilotIntegrationEnabled should return default value (true) when setting is not found",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/CopilotIntegrationCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info without selection when no text is selected",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info without selection when no text is selected",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info with single line selection",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info with single line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return file info with multi-line selection",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return file info with multi-line selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return null when no active editor",
      "fullTitle": "FileReferenceCommand getActiveFileInfo should return null when no active editor",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference without line numbers when no selection",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference without line numbers when no selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with single line number",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference with single line number",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should format file reference with line range",
      "fullTitle": "FileReferenceCommand formatFileReference should format file reference with line range",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should send file reference without line numbers when no selection",
      "fullTitle": "FileReferenceCommand handleSendAtMention should send file reference without line numbers when no selection",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should send file reference with line numbers when text is selected",
      "fullTitle": "FileReferenceCommand handleSendAtMention should send file reference with line numbers when text is selected",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show warning when no active editor",
      "fullTitle": "FileReferenceCommand handleSendAtMention should show warning when no active editor",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show warning when CLI Agent integration is disabled",
      "fullTitle": "FileReferenceCommand handleSendAtMention should show warning when CLI Agent integration is disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/commands/FileReferenceCommand.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should initialize with default state",
      "fullTitle": "SettingsPanel constructor should initialize with default state",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should initialize without callback options",
      "fullTitle": "SettingsPanel constructor should initialize without callback options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show settings panel",
      "fullTitle": "SettingsPanel show should show settings panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 24,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should hide panel if already visible",
      "fullTitle": "SettingsPanel show should hide panel if already visible",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 6,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should populate settings when provided",
      "fullTitle": "SettingsPanel show should populate settings when provided",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 5,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create settings content with correct structure",
      "fullTitle": "SettingsPanel show should create settings content with correct structure",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle error gracefully",
      "fullTitle": "SettingsPanel show should handle error gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 7,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should hide settings panel",
      "fullTitle": "SettingsPanel hide should hide settings panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call onClose callback",
      "fullTitle": "SettingsPanel hide should call onClose callback",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle hide when panel not visible",
      "fullTitle": "SettingsPanel hide should handle hide when panel not visible",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle error gracefully",
      "fullTitle": "SettingsPanel hide should handle error gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should update font size value display when slider changes",
      "fullTitle": "SettingsPanel font size control should update font size value display when slider changes",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct slider range",
      "fullTitle": "SettingsPanel font size control should have correct slider range",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when close button is clicked",
      "fullTitle": "SettingsPanel button interactions should close panel when close button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should apply settings when apply button is clicked",
      "fullTitle": "SettingsPanel button interactions should apply settings when apply button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should reset settings when reset button is clicked",
      "fullTitle": "SettingsPanel button interactions should reset settings when reset button is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when Escape key is pressed",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should close panel when Escape key is pressed",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not close panel when other keys are pressed",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should not close panel when other keys are pressed",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should close panel when background is clicked",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should close panel when background is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not close panel when content is clicked",
      "fullTitle": "SettingsPanel keyboard and mouse interactions should not close panel when content is clicked",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should collect current settings correctly",
      "fullTitle": "SettingsPanel settings collection should collect current settings correctly",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should use defaults for missing elements",
      "fullTitle": "SettingsPanel settings collection should use defaults for missing elements",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle missing settings gracefully",
      "fullTitle": "SettingsPanel settings population should handle missing settings gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle partial settings",
      "fullTitle": "SettingsPanel settings population should handle partial settings",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle invalid settings gracefully",
      "fullTitle": "SettingsPanel settings population should handle invalid settings gracefully",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct font family options",
      "fullTitle": "SettingsPanel font family options should have correct font family options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have correct theme options",
      "fullTitle": "SettingsPanel theme options should have correct theme options",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should reset all settings to defaults",
      "fullTitle": "SettingsPanel reset to defaults should reset all settings to defaults",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should clean up panel",
      "fullTitle": "SettingsPanel dispose should clean up panel",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 7,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle dispose when panel not shown",
      "fullTitle": "SettingsPanel dispose should handle dispose when panel not shown",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set up animation styles when showing",
      "fullTitle": "SettingsPanel panel animations should set up animation styles when showing",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have proper labels for form controls",
      "fullTitle": "SettingsPanel accessibility features should have proper labels for form controls",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should have close button with title attribute",
      "fullTitle": "SettingsPanel accessibility features should have close button with title attribute",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/components/SettingsPanel.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect VS Code altClickMovesCursor setting",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should detect VS Code altClickMovesCursor setting",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should disable Alt+Click when settings are not met",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should disable Alt+Click when settings are not met",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should disable Alt+Click when multiCursorModifier is not alt",
      "fullTitle": "Alt+Click Cursor Positioning VS Code Settings Integration should disable Alt+Click when multiCursorModifier is not alt",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect CLI Agent output patterns",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should detect CLI Agent output patterns",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not trigger on normal terminal output",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should not trigger on normal terminal output",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect high-frequency output scenarios",
      "fullTitle": "Alt+Click Cursor Positioning CLI Agent Detection Logic should detect high-frequency output scenarios",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should configure xterm.js with altClickMovesCursor option",
      "fullTitle": "Alt+Click Cursor Positioning xterm.js Integration should configure xterm.js with altClickMovesCursor option",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle dynamic settings updates",
      "fullTitle": "Alt+Click Cursor Positioning xterm.js Integration should handle dynamic settings updates",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should change cursor style on Alt key press",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should change cursor style on Alt key press",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should restore cursor style on Alt key release",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should restore cursor style on Alt key release",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle Alt+Click events properly",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should handle Alt+Click events properly",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should prevent normal clicks from interfering",
      "fullTitle": "Alt+Click Cursor Positioning Event Handling should prevent normal clicks from interfering",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should use optimized buffering during CLI Agent execution",
      "fullTitle": "Alt+Click Cursor Positioning Performance Optimization should use optimized buffering during CLI Agent execution",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle large output chunks immediately",
      "fullTitle": "Alt+Click Cursor Positioning Performance Optimization should handle large output chunks immediately",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should provide visual feedback for Alt+Click availability",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should provide visual feedback for Alt+Click availability",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should notify users when Alt+Click is temporarily disabled",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should notify users when Alt+Click is temporarily disabled",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should show re-enablement notification",
      "fullTitle": "Alt+Click Cursor Positioning User Feedback System should show re-enablement notification",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/features/alt-click.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Claude Code from command",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Claude Code from command",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Claude Code with arguments",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Claude Code with arguments",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Gemini from command",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Gemini from command",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should detect Gemini with arguments",
      "fullTitle": "CliAgentDetectionService detectFromCommand should detect Gemini with arguments",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentDetectionService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should activate first agent as CONNECTED",
      "fullTitle": "CliAgentStateService activateAgent should activate first agent as CONNECTED",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should make new agent CONNECTED and previous one DISCONNECTED",
      "fullTitle": "CliAgentStateService activateAgent should make new agent CONNECTED and previous one DISCONNECTED",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should maintain single CONNECTED rule",
      "fullTitle": "CliAgentStateService invariants should maintain single CONNECTED rule",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle deactivating non-existent agent",
      "fullTitle": "CliAgentStateService edge cases should handle deactivating non-existent agent",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should handle cleanupTerminal",
      "fullTitle": "CliAgentStateService edge cases should handle cleanupTerminal",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/CliAgentStateService.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "初期状態はNONE",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 基本的な状態遷移 初期状態はNONE",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "新しいCLI Agent起動時、既存のCONNECTEDはDISCONNECTEDに変更",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 相互排他制御 新しいCLI Agent起動時、既存のCONNECTEDはDISCONNECTEDに変更",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "異なるタイプのCLI Agent間でも相互排他が動作",
      "fullTitle": "CliAgentIntegrationManager - 3状態システム 相互排他制御 異なるタイプのCLI Agent間でも相互排他が動作",
      "file": "/workspaces/vscode-sidebar-terminal/out/test/unit/integration/SecondaryCliAgentDetector.test.js",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {
        "stack": "TypeError: [Function noop] is not a spy or a call to a spy!\n    at assertCanWorkWith (node_modules/sinon-chai/lib/sinon-chai.js:53:19)\n    at Proxy.<anonymous> (node_modules/sinon-chai/lib/sinon-chai.js:98:13)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Timeout._onTimeout (src/test/unit/commands/FileReferenceCommand.test.ts:192:62)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7)",
        "message": "[Function noop] is not a spy or a call to a spy!",
        "uncaught": true
      }
    }
  ]
}